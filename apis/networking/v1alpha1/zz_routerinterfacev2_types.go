/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouterInterfaceV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RouterInterfaceV2Parameters struct {

	// +kubebuilder:validation:Optional
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	RouterID *string `json:"routerId" tf:"router_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

// RouterInterfaceV2Spec defines the desired state of RouterInterfaceV2
type RouterInterfaceV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouterInterfaceV2Parameters `json:"forProvider"`
}

// RouterInterfaceV2Status defines the observed state of RouterInterfaceV2.
type RouterInterfaceV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouterInterfaceV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouterInterfaceV2 is the Schema for the RouterInterfaceV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type RouterInterfaceV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouterInterfaceV2Spec   `json:"spec"`
	Status            RouterInterfaceV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouterInterfaceV2List contains a list of RouterInterfaceV2s
type RouterInterfaceV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouterInterfaceV2 `json:"items"`
}

// Repository type metadata.
var (
	RouterInterfaceV2_Kind             = "RouterInterfaceV2"
	RouterInterfaceV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouterInterfaceV2_Kind}.String()
	RouterInterfaceV2_KindAPIVersion   = RouterInterfaceV2_Kind + "." + CRDGroupVersion.String()
	RouterInterfaceV2_GroupVersionKind = CRDGroupVersion.WithKind(RouterInterfaceV2_Kind)
)

func init() {
	SchemeBuilder.Register(&RouterInterfaceV2{}, &RouterInterfaceV2List{})
}
