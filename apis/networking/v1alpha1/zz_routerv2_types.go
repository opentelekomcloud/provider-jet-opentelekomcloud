/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouterV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RouterV2Parameters struct {

	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// +kubebuilder:validation:Optional
	Distributed *bool `json:"distributed,omitempty" tf:"distributed,omitempty"`

	// +kubebuilder:validation:Optional
	EnableSnat *bool `json:"enableSnat,omitempty" tf:"enable_snat,omitempty"`

	// +kubebuilder:validation:Optional
	ExternalGateway *string `json:"externalGateway,omitempty" tf:"external_gateway,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSpecs map[string]string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

// RouterV2Spec defines the desired state of RouterV2
type RouterV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouterV2Parameters `json:"forProvider"`
}

// RouterV2Status defines the observed state of RouterV2.
type RouterV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouterV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouterV2 is the Schema for the RouterV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type RouterV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouterV2Spec   `json:"spec"`
	Status            RouterV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouterV2List contains a list of RouterV2s
type RouterV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouterV2 `json:"items"`
}

// Repository type metadata.
var (
	RouterV2_Kind             = "RouterV2"
	RouterV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouterV2_Kind}.String()
	RouterV2_KindAPIVersion   = RouterV2_Kind + "." + CRDGroupVersion.String()
	RouterV2_GroupVersionKind = CRDGroupVersion.WithKind(RouterV2_Kind)
)

func init() {
	SchemeBuilder.Register(&RouterV2{}, &RouterV2List{})
}
