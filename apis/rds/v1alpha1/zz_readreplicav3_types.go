/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReadReplicaV3DBObservation struct {
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ReadReplicaV3DBParameters struct {
}

type ReadReplicaV3Observation struct {
	DB []ReadReplicaV3DBObservation `json:"db,omitempty" tf:"db,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PrivateIps []*string `json:"privateIps,omitempty" tf:"private_ips,omitempty"`

	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ReadReplicaV3Parameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Required
	FlavorRef *string `json:"flavorRef" tf:"flavor_ref,omitempty"`

	// +kubebuilder:validation:Optional
	PublicIps []*string `json:"publicIps,omitempty" tf:"public_ips,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	ReplicaOfID *string `json:"replicaOfId" tf:"replica_of_id,omitempty"`

	// +kubebuilder:validation:Required
	Volume []ReadReplicaV3VolumeParameters `json:"volume" tf:"volume,omitempty"`
}

type ReadReplicaV3VolumeObservation struct {
	Size *int64 `json:"size,omitempty" tf:"size,omitempty"`
}

type ReadReplicaV3VolumeParameters struct {

	// +kubebuilder:validation:Optional
	DiskEncryptionID *string `json:"diskEncryptionId,omitempty" tf:"disk_encryption_id,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// ReadReplicaV3Spec defines the desired state of ReadReplicaV3
type ReadReplicaV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReadReplicaV3Parameters `json:"forProvider"`
}

// ReadReplicaV3Status defines the observed state of ReadReplicaV3.
type ReadReplicaV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReadReplicaV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReadReplicaV3 is the Schema for the ReadReplicaV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type ReadReplicaV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReadReplicaV3Spec   `json:"spec"`
	Status            ReadReplicaV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReadReplicaV3List contains a list of ReadReplicaV3s
type ReadReplicaV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReadReplicaV3 `json:"items"`
}

// Repository type metadata.
var (
	ReadReplicaV3_Kind             = "ReadReplicaV3"
	ReadReplicaV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ReadReplicaV3_Kind}.String()
	ReadReplicaV3_KindAPIVersion   = ReadReplicaV3_Kind + "." + CRDGroupVersion.String()
	ReadReplicaV3_GroupVersionKind = CRDGroupVersion.WithKind(ReadReplicaV3_Kind)
)

func init() {
	SchemeBuilder.Register(&ReadReplicaV3{}, &ReadReplicaV3List{})
}
