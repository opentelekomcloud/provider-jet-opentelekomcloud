/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupStrategyObservation struct {
}

type BackupStrategyParameters struct {

	// +kubebuilder:validation:Optional
	KeepDays *int64 `json:"keepDays,omitempty" tf:"keep_days,omitempty"`

	// +kubebuilder:validation:Required
	StartTime *string `json:"startTime" tf:"start_time,omitempty"`
}

type DBObservation struct {
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type DBParameters struct {

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

type InstanceV3Observation struct {
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Nodes []NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	PrivateIps []*string `json:"privateIps,omitempty" tf:"private_ips,omitempty"`
}

type InstanceV3Parameters struct {

	// +kubebuilder:validation:Required
	AvailabilityZone []*string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	BackupStrategy []BackupStrategyParameters `json:"backupStrategy,omitempty" tf:"backup_strategy,omitempty"`

	// +kubebuilder:validation:Required
	DB []DBParameters `json:"db" tf:"db,omitempty"`

	// +kubebuilder:validation:Required
	Flavor *string `json:"flavor" tf:"flavor,omitempty"`

	// +kubebuilder:validation:Optional
	HaReplicationMode *string `json:"haReplicationMode,omitempty" tf:"ha_replication_mode,omitempty"`

	// +kubebuilder:validation:Optional
	ParamGroupID *string `json:"paramGroupId,omitempty" tf:"param_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	PublicIps []*string `json:"publicIps,omitempty" tf:"public_ips,omitempty"`

	// +kubebuilder:validation:Required
	SecurityGroupID *string `json:"securityGroupId" tf:"security_group_id,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tag map[string]string `json:"tag,omitempty" tf:"tag,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Required
	Volume []InstanceV3VolumeParameters `json:"volume" tf:"volume,omitempty"`
}

type InstanceV3VolumeObservation struct {
}

type InstanceV3VolumeParameters struct {

	// +kubebuilder:validation:Optional
	DiskEncryptionID *string `json:"diskEncryptionId,omitempty" tf:"disk_encryption_id,omitempty"`

	// +kubebuilder:validation:Required
	Size *int64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type NodesObservation struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NodesParameters struct {
}

// InstanceV3Spec defines the desired state of InstanceV3
type InstanceV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceV3Parameters `json:"forProvider"`
}

// InstanceV3Status defines the observed state of InstanceV3.
type InstanceV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceV3 is the Schema for the InstanceV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type InstanceV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceV3Spec   `json:"spec"`
	Status            InstanceV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceV3List contains a list of InstanceV3s
type InstanceV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceV3 `json:"items"`
}

// Repository type metadata.
var (
	InstanceV3_Kind             = "InstanceV3"
	InstanceV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceV3_Kind}.String()
	InstanceV3_KindAPIVersion   = InstanceV3_Kind + "." + CRDGroupVersion.String()
	InstanceV3_GroupVersionKind = CRDGroupVersion.WithKind(InstanceV3_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceV3{}, &InstanceV3List{})
}
