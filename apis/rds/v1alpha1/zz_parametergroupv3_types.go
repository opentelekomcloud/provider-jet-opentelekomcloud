/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationParametersObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	RestartRequired *bool `json:"restartRequired,omitempty" tf:"restart_required,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	ValueRange *string `json:"valueRange,omitempty" tf:"value_range,omitempty"`
}

type ConfigurationParametersParameters struct {
}

type ParametergroupV3DatastoreObservation struct {
}

type ParametergroupV3DatastoreParameters struct {

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

type ParametergroupV3Observation struct {
	ConfigurationParameters []ConfigurationParametersObservation `json:"configurationParameters,omitempty" tf:"configuration_parameters,omitempty"`

	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type ParametergroupV3Parameters struct {

	// +kubebuilder:validation:Required
	Datastore []ParametergroupV3DatastoreParameters `json:"datastore" tf:"datastore,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Values map[string]string `json:"values,omitempty" tf:"values,omitempty"`
}

// ParametergroupV3Spec defines the desired state of ParametergroupV3
type ParametergroupV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ParametergroupV3Parameters `json:"forProvider"`
}

// ParametergroupV3Status defines the observed state of ParametergroupV3.
type ParametergroupV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ParametergroupV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ParametergroupV3 is the Schema for the ParametergroupV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type ParametergroupV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ParametergroupV3Spec   `json:"spec"`
	Status            ParametergroupV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ParametergroupV3List contains a list of ParametergroupV3s
type ParametergroupV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ParametergroupV3 `json:"items"`
}

// Repository type metadata.
var (
	ParametergroupV3_Kind             = "ParametergroupV3"
	ParametergroupV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ParametergroupV3_Kind}.String()
	ParametergroupV3_KindAPIVersion   = ParametergroupV3_Kind + "." + CRDGroupVersion.String()
	ParametergroupV3_GroupVersionKind = CRDGroupVersion.WithKind(ParametergroupV3_Kind)
)

func init() {
	SchemeBuilder.Register(&ParametergroupV3{}, &ParametergroupV3List{})
}
