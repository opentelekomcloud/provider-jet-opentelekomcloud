/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupstrategyObservation struct {
}

type BackupstrategyParameters struct {

	// +kubebuilder:validation:Optional
	Keepdays *int64 `json:"keepdays,omitempty" tf:"keepdays,omitempty"`

	// +kubebuilder:validation:Optional
	Starttime *string `json:"starttime,omitempty" tf:"starttime,omitempty"`
}

type DatastoreObservation struct {
}

type DatastoreParameters struct {

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

type HaObservation struct {
}

type HaParameters struct {

	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// +kubebuilder:validation:Optional
	Replicationmode *string `json:"replicationmode,omitempty" tf:"replicationmode,omitempty"`
}

type InstanceV1Observation struct {
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type InstanceV1Parameters struct {

	// +kubebuilder:validation:Required
	Availabilityzone *string `json:"availabilityzone" tf:"availabilityzone,omitempty"`

	// +kubebuilder:validation:Optional
	Backupstrategy []BackupstrategyParameters `json:"backupstrategy,omitempty" tf:"backupstrategy,omitempty"`

	// +kubebuilder:validation:Required
	Datastore []DatastoreParameters `json:"datastore" tf:"datastore,omitempty"`

	// +kubebuilder:validation:Optional
	Dbport *string `json:"dbport,omitempty" tf:"dbport,omitempty"`

	// +kubebuilder:validation:Required
	Dbrtpd *string `json:"dbrtpd" tf:"dbrtpd,omitempty"`

	// +kubebuilder:validation:Required
	Flavorref *string `json:"flavorref" tf:"flavorref,omitempty"`

	// +kubebuilder:validation:Optional
	Ha []HaParameters `json:"ha,omitempty" tf:"ha,omitempty"`

	// +kubebuilder:validation:Required
	Nics []NicsParameters `json:"nics" tf:"nics,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	Securitygroup []SecuritygroupParameters `json:"securitygroup" tf:"securitygroup,omitempty"`

	// +kubebuilder:validation:Optional
	Tag map[string]string `json:"tag,omitempty" tf:"tag,omitempty"`

	// +kubebuilder:validation:Required
	VPC *string `json:"vpc" tf:"vpc,omitempty"`

	// +kubebuilder:validation:Required
	Volume []VolumeParameters `json:"volume" tf:"volume,omitempty"`
}

type NicsObservation struct {
}

type NicsParameters struct {

	// +kubebuilder:validation:Required
	Subnetid *string `json:"subnetid" tf:"subnetid,omitempty"`
}

type SecuritygroupObservation struct {
}

type SecuritygroupParameters struct {

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`
}

type VolumeObservation struct {
}

type VolumeParameters struct {

	// +kubebuilder:validation:Required
	Size *int64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// InstanceV1Spec defines the desired state of InstanceV1
type InstanceV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceV1Parameters `json:"forProvider"`
}

// InstanceV1Status defines the observed state of InstanceV1.
type InstanceV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceV1 is the Schema for the InstanceV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type InstanceV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceV1Spec   `json:"spec"`
	Status            InstanceV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceV1List contains a list of InstanceV1s
type InstanceV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceV1 `json:"items"`
}

// Repository type metadata.
var (
	InstanceV1_Kind             = "InstanceV1"
	InstanceV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceV1_Kind}.String()
	InstanceV1_KindAPIVersion   = InstanceV1_Kind + "." + CRDGroupVersion.String()
	InstanceV1_GroupVersionKind = CRDGroupVersion.WithKind(InstanceV1_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceV1{}, &InstanceV1List{})
}
