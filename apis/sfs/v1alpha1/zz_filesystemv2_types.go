/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FileSystemV2Observation struct {
	AccessRuleStatus *string `json:"accessRuleStatus,omitempty" tf:"access_rule_status,omitempty"`

	ExportLocation *string `json:"exportLocation,omitempty" tf:"export_location,omitempty"`

	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ShareAccessID *string `json:"shareAccessId,omitempty" tf:"share_access_id,omitempty"`

	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type FileSystemV2Parameters struct {

	// +kubebuilder:validation:Optional
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// +kubebuilder:validation:Optional
	AccessTo *string `json:"accessTo,omitempty" tf:"access_to,omitempty"`

	// +kubebuilder:validation:Optional
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata map[string]string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	ShareProto *string `json:"shareProto,omitempty" tf:"share_proto,omitempty"`

	// +kubebuilder:validation:Required
	Size *int64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// FileSystemV2Spec defines the desired state of FileSystemV2
type FileSystemV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FileSystemV2Parameters `json:"forProvider"`
}

// FileSystemV2Status defines the observed state of FileSystemV2.
type FileSystemV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FileSystemV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FileSystemV2 is the Schema for the FileSystemV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type FileSystemV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FileSystemV2Spec   `json:"spec"`
	Status            FileSystemV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FileSystemV2List contains a list of FileSystemV2s
type FileSystemV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FileSystemV2 `json:"items"`
}

// Repository type metadata.
var (
	FileSystemV2_Kind             = "FileSystemV2"
	FileSystemV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FileSystemV2_Kind}.String()
	FileSystemV2_KindAPIVersion   = FileSystemV2_Kind + "." + CRDGroupVersion.String()
	FileSystemV2_GroupVersionKind = CRDGroupVersion.WithKind(FileSystemV2_Kind)
)

func init() {
	SchemeBuilder.Register(&FileSystemV2{}, &FileSystemV2List{})
}
