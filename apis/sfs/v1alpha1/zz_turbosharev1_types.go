/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TurboShareV1Observation struct {
	AvailableCapacity *string `json:"availableCapacity,omitempty" tf:"available_capacity,omitempty"`

	ExportLocation *string `json:"exportLocation,omitempty" tf:"export_location,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TurboShareV1Parameters struct {

	// +kubebuilder:validation:Required
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	CryptKeyID *string `json:"cryptKeyId,omitempty" tf:"crypt_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	SecurityGroupID *string `json:"securityGroupId" tf:"security_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	ShareProto *string `json:"shareProto,omitempty" tf:"share_proto,omitempty"`

	// +kubebuilder:validation:Optional
	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	// +kubebuilder:validation:Required
	Size *int64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// TurboShareV1Spec defines the desired state of TurboShareV1
type TurboShareV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TurboShareV1Parameters `json:"forProvider"`
}

// TurboShareV1Status defines the observed state of TurboShareV1.
type TurboShareV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TurboShareV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TurboShareV1 is the Schema for the TurboShareV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type TurboShareV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TurboShareV1Spec   `json:"spec"`
	Status            TurboShareV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TurboShareV1List contains a list of TurboShareV1s
type TurboShareV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TurboShareV1 `json:"items"`
}

// Repository type metadata.
var (
	TurboShareV1_Kind             = "TurboShareV1"
	TurboShareV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TurboShareV1_Kind}.String()
	TurboShareV1_KindAPIVersion   = TurboShareV1_Kind + "." + CRDGroupVersion.String()
	TurboShareV1_GroupVersionKind = CRDGroupVersion.WithKind(TurboShareV1_Kind)
)

func init() {
	SchemeBuilder.Register(&TurboShareV1{}, &TurboShareV1List{})
}
