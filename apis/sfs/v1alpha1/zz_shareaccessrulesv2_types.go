/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessRuleObservation struct {
	AccessRuleStatus *string `json:"accessRuleStatus,omitempty" tf:"access_rule_status,omitempty"`

	ShareAccessID *string `json:"shareAccessId,omitempty" tf:"share_access_id,omitempty"`
}

type AccessRuleParameters struct {

	// +kubebuilder:validation:Required
	AccessLevel *string `json:"accessLevel" tf:"access_level,omitempty"`

	// +kubebuilder:validation:Required
	AccessTo *string `json:"accessTo" tf:"access_to,omitempty"`

	// +kubebuilder:validation:Optional
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`
}

type ShareAccessRulesV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ShareAccessRulesV2Parameters struct {

	// +kubebuilder:validation:Required
	AccessRule []AccessRuleParameters `json:"accessRule" tf:"access_rule,omitempty"`

	// +kubebuilder:validation:Required
	ShareID *string `json:"shareId" tf:"share_id,omitempty"`
}

// ShareAccessRulesV2Spec defines the desired state of ShareAccessRulesV2
type ShareAccessRulesV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShareAccessRulesV2Parameters `json:"forProvider"`
}

// ShareAccessRulesV2Status defines the observed state of ShareAccessRulesV2.
type ShareAccessRulesV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShareAccessRulesV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ShareAccessRulesV2 is the Schema for the ShareAccessRulesV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type ShareAccessRulesV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ShareAccessRulesV2Spec   `json:"spec"`
	Status            ShareAccessRulesV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShareAccessRulesV2List contains a list of ShareAccessRulesV2s
type ShareAccessRulesV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ShareAccessRulesV2 `json:"items"`
}

// Repository type metadata.
var (
	ShareAccessRulesV2_Kind             = "ShareAccessRulesV2"
	ShareAccessRulesV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ShareAccessRulesV2_Kind}.String()
	ShareAccessRulesV2_KindAPIVersion   = ShareAccessRulesV2_Kind + "." + CRDGroupVersion.String()
	ShareAccessRulesV2_GroupVersionKind = CRDGroupVersion.WithKind(ShareAccessRulesV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ShareAccessRulesV2{}, &ShareAccessRulesV2List{})
}
