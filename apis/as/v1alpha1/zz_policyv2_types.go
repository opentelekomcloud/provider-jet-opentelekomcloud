/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MetadataObservation struct {
	BandwidthShareType *string `json:"bandwidthShareType,omitempty" tf:"bandwidth_share_type,omitempty"`

	EIPAddress *string `json:"eipAddress,omitempty" tf:"eip_address,omitempty"`

	EIPID *string `json:"eipId,omitempty" tf:"eip_id,omitempty"`
}

type MetadataParameters struct {
}

type PolicyV2Observation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Metadata []MetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`
}

type PolicyV2Parameters struct {

	// +kubebuilder:validation:Optional
	AlarmID *string `json:"alarmId,omitempty" tf:"alarm_id,omitempty"`

	// +kubebuilder:validation:Optional
	CoolDownTime *int64 `json:"coolDownTime,omitempty" tf:"cool_down_time,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	ScalingPolicyAction []PolicyV2ScalingPolicyActionParameters `json:"scalingPolicyAction,omitempty" tf:"scaling_policy_action,omitempty"`

	// +kubebuilder:validation:Required
	ScalingPolicyName *string `json:"scalingPolicyName" tf:"scaling_policy_name,omitempty"`

	// +kubebuilder:validation:Required
	ScalingPolicyType *string `json:"scalingPolicyType" tf:"scaling_policy_type,omitempty"`

	// +kubebuilder:validation:Required
	ScalingResourceID *string `json:"scalingResourceId" tf:"scaling_resource_id,omitempty"`

	// +kubebuilder:validation:Required
	ScalingResourceType *string `json:"scalingResourceType" tf:"scaling_resource_type,omitempty"`

	// +kubebuilder:validation:Optional
	ScheduledPolicy []PolicyV2ScheduledPolicyParameters `json:"scheduledPolicy,omitempty" tf:"scheduled_policy,omitempty"`
}

type PolicyV2ScalingPolicyActionObservation struct {
}

type PolicyV2ScalingPolicyActionParameters struct {

	// +kubebuilder:validation:Optional
	Limits *int64 `json:"limits,omitempty" tf:"limits,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// +kubebuilder:validation:Optional
	Percentage *int64 `json:"percentage,omitempty" tf:"percentage,omitempty"`

	// +kubebuilder:validation:Optional
	Size *int64 `json:"size,omitempty" tf:"size,omitempty"`
}

type PolicyV2ScheduledPolicyObservation struct {
}

type PolicyV2ScheduledPolicyParameters struct {

	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// +kubebuilder:validation:Required
	LaunchTime *string `json:"launchTime" tf:"launch_time,omitempty"`

	// +kubebuilder:validation:Optional
	RecurrenceType *string `json:"recurrenceType,omitempty" tf:"recurrence_type,omitempty"`

	// +kubebuilder:validation:Optional
	RecurrenceValue *string `json:"recurrenceValue,omitempty" tf:"recurrence_value,omitempty"`

	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

// PolicyV2Spec defines the desired state of PolicyV2
type PolicyV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyV2Parameters `json:"forProvider"`
}

// PolicyV2Status defines the observed state of PolicyV2.
type PolicyV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyV2 is the Schema for the PolicyV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type PolicyV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyV2Spec   `json:"spec"`
	Status            PolicyV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyV2List contains a list of PolicyV2s
type PolicyV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyV2 `json:"items"`
}

// Repository type metadata.
var (
	PolicyV2_Kind             = "PolicyV2"
	PolicyV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyV2_Kind}.String()
	PolicyV2_KindAPIVersion   = PolicyV2_Kind + "." + CRDGroupVersion.String()
	PolicyV2_GroupVersionKind = CRDGroupVersion.WithKind(PolicyV2_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyV2{}, &PolicyV2List{})
}
