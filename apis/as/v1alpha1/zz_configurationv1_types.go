/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BandwidthObservation struct {
}

type BandwidthParameters struct {

	// +kubebuilder:validation:Required
	ChargingMode *string `json:"chargingMode" tf:"charging_mode,omitempty"`

	// +kubebuilder:validation:Required
	ShareType *string `json:"shareType" tf:"share_type,omitempty"`

	// +kubebuilder:validation:Required
	Size *int64 `json:"size" tf:"size,omitempty"`
}

type ConfigurationV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConfigurationV1Parameters struct {

	// +kubebuilder:validation:Required
	InstanceConfig []InstanceConfigParameters `json:"instanceConfig" tf:"instance_config,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	ScalingConfigurationName *string `json:"scalingConfigurationName" tf:"scaling_configuration_name,omitempty"`
}

type DiskObservation struct {
}

type DiskParameters struct {

	// +kubebuilder:validation:Required
	DiskType *string `json:"diskType" tf:"disk_type,omitempty"`

	// +kubebuilder:validation:Optional
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// +kubebuilder:validation:Required
	Size *int64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	VolumeType *string `json:"volumeType" tf:"volume_type,omitempty"`
}

type EIPObservation struct {
}

type EIPParameters struct {

	// +kubebuilder:validation:Required
	Bandwidth []BandwidthParameters `json:"bandwidth" tf:"bandwidth,omitempty"`

	// +kubebuilder:validation:Required
	IPType *string `json:"ipType" tf:"ip_type,omitempty"`
}

type InstanceConfigObservation struct {
}

type InstanceConfigParameters struct {

	// +kubebuilder:validation:Optional
	Disk []DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// +kubebuilder:validation:Optional
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Required
	KeyName *string `json:"keyName" tf:"key_name,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata map[string]string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Optional
	Personality []PersonalityParameters `json:"personality,omitempty" tf:"personality,omitempty"`

	// +kubebuilder:validation:Optional
	PublicIP []PublicIPParameters `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type PersonalityObservation struct {
}

type PersonalityParameters struct {

	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`
}

type PublicIPObservation struct {
}

type PublicIPParameters struct {

	// +kubebuilder:validation:Required
	EIP []EIPParameters `json:"eip" tf:"eip,omitempty"`
}

// ConfigurationV1Spec defines the desired state of ConfigurationV1
type ConfigurationV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationV1Parameters `json:"forProvider"`
}

// ConfigurationV1Status defines the observed state of ConfigurationV1.
type ConfigurationV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationV1 is the Schema for the ConfigurationV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type ConfigurationV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationV1Spec   `json:"spec"`
	Status            ConfigurationV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationV1List contains a list of ConfigurationV1s
type ConfigurationV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationV1 `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationV1_Kind             = "ConfigurationV1"
	ConfigurationV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigurationV1_Kind}.String()
	ConfigurationV1_KindAPIVersion   = ConfigurationV1_Kind + "." + CRDGroupVersion.String()
	ConfigurationV1_GroupVersionKind = CRDGroupVersion.WithKind(ConfigurationV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationV1{}, &ConfigurationV1List{})
}
