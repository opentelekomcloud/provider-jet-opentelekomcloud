/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupV1Observation struct {
	CurrentInstanceNumber *int64 `json:"currentInstanceNumber,omitempty" tf:"current_instance_number,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Instances []*string `json:"instances,omitempty" tf:"instances,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type GroupV1Parameters struct {

	// +kubebuilder:validation:Optional
	AvailableZones []*string `json:"availableZones,omitempty" tf:"available_zones,omitempty"`

	// The cooling duration, in seconds.
	// +kubebuilder:validation:Optional
	CoolDownTime *int64 `json:"coolDownTime,omitempty" tf:"cool_down_time,omitempty"`

	// Whether to delete instances when they are removed from the AS group.
	// +kubebuilder:validation:Optional
	DeleteInstances *string `json:"deleteInstances,omitempty" tf:"delete_instances,omitempty"`

	// +kubebuilder:validation:Optional
	DeletePublicip *bool `json:"deletePublicip,omitempty" tf:"delete_publicip,omitempty"`

	// +kubebuilder:validation:Optional
	DesireInstanceNumber *int64 `json:"desireInstanceNumber,omitempty" tf:"desire_instance_number,omitempty"`

	// The grace period for instance health check, in seconds.
	// +kubebuilder:validation:Optional
	HealthPeriodicAuditGracePeriod *int64 `json:"healthPeriodicAuditGracePeriod,omitempty" tf:"health_periodic_audit_grace_period,omitempty"`

	// +kubebuilder:validation:Optional
	HealthPeriodicAuditMethod *string `json:"healthPeriodicAuditMethod,omitempty" tf:"health_periodic_audit_method,omitempty"`

	// The health check period for instances, in minutes.
	// +kubebuilder:validation:Optional
	HealthPeriodicAuditTime *int64 `json:"healthPeriodicAuditTime,omitempty" tf:"health_periodic_audit_time,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceTerminatePolicy *string `json:"instanceTerminatePolicy,omitempty" tf:"instance_terminate_policy,omitempty"`

	// The system supports the binding of up to six classic LB listeners, the IDs of which are separated using a comma.
	// +kubebuilder:validation:Optional
	LBListenerID *string `json:"lbListenerId,omitempty" tf:"lb_listener_id,omitempty"`

	// +kubebuilder:validation:Optional
	LbaasListeners []LbaasListenersParameters `json:"lbaasListeners,omitempty" tf:"lbaas_listeners,omitempty"`

	// +kubebuilder:validation:Optional
	MaxInstanceNumber *int64 `json:"maxInstanceNumber,omitempty" tf:"max_instance_number,omitempty"`

	// +kubebuilder:validation:Optional
	MinInstanceNumber *int64 `json:"minInstanceNumber,omitempty" tf:"min_instance_number,omitempty"`

	// +kubebuilder:validation:Required
	Networks []NetworksParameters `json:"networks" tf:"networks,omitempty"`

	// +kubebuilder:validation:Optional
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	ScalingConfigurationID *string `json:"scalingConfigurationId,omitempty" tf:"scaling_configuration_id,omitempty"`

	// +kubebuilder:validation:Required
	ScalingGroupName *string `json:"scalingGroupName" tf:"scaling_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroups []SecurityGroupsParameters `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

type LbaasListenersObservation struct {
}

type LbaasListenersParameters struct {

	// +kubebuilder:validation:Required
	PoolID *string `json:"poolId" tf:"pool_id,omitempty"`

	// +kubebuilder:validation:Required
	ProtocolPort *int64 `json:"protocolPort" tf:"protocol_port,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *int64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type NetworksObservation struct {
}

type NetworksParameters struct {

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`
}

type SecurityGroupsObservation struct {
}

type SecurityGroupsParameters struct {

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`
}

// GroupV1Spec defines the desired state of GroupV1
type GroupV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupV1Parameters `json:"forProvider"`
}

// GroupV1Status defines the observed state of GroupV1.
type GroupV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupV1 is the Schema for the GroupV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type GroupV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupV1Spec   `json:"spec"`
	Status            GroupV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupV1List contains a list of GroupV1s
type GroupV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupV1 `json:"items"`
}

// Repository type metadata.
var (
	GroupV1_Kind             = "GroupV1"
	GroupV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupV1_Kind}.String()
	GroupV1_KindAPIVersion   = GroupV1_Kind + "." + CRDGroupVersion.String()
	GroupV1_GroupVersionKind = CRDGroupVersion.WithKind(GroupV1_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupV1{}, &GroupV1List{})
}
