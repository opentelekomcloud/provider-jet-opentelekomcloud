/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyV1Parameters struct {

	// +kubebuilder:validation:Optional
	AlarmID *string `json:"alarmId,omitempty" tf:"alarm_id,omitempty"`

	// +kubebuilder:validation:Optional
	CoolDownTime *int64 `json:"coolDownTime,omitempty" tf:"cool_down_time,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	ScalingGroupID *string `json:"scalingGroupId" tf:"scaling_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	ScalingPolicyAction []ScalingPolicyActionParameters `json:"scalingPolicyAction,omitempty" tf:"scaling_policy_action,omitempty"`

	// +kubebuilder:validation:Required
	ScalingPolicyName *string `json:"scalingPolicyName" tf:"scaling_policy_name,omitempty"`

	// +kubebuilder:validation:Required
	ScalingPolicyType *string `json:"scalingPolicyType" tf:"scaling_policy_type,omitempty"`

	// +kubebuilder:validation:Optional
	ScheduledPolicy []ScheduledPolicyParameters `json:"scheduledPolicy,omitempty" tf:"scheduled_policy,omitempty"`
}

type ScalingPolicyActionObservation struct {
}

type ScalingPolicyActionParameters struct {

	// +kubebuilder:validation:Optional
	InstanceNumber *int64 `json:"instanceNumber,omitempty" tf:"instance_number,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`
}

type ScheduledPolicyObservation struct {
}

type ScheduledPolicyParameters struct {

	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// +kubebuilder:validation:Required
	LaunchTime *string `json:"launchTime" tf:"launch_time,omitempty"`

	// +kubebuilder:validation:Optional
	RecurrenceType *string `json:"recurrenceType,omitempty" tf:"recurrence_type,omitempty"`

	// +kubebuilder:validation:Optional
	RecurrenceValue *string `json:"recurrenceValue,omitempty" tf:"recurrence_value,omitempty"`

	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

// PolicyV1Spec defines the desired state of PolicyV1
type PolicyV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyV1Parameters `json:"forProvider"`
}

// PolicyV1Status defines the observed state of PolicyV1.
type PolicyV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyV1 is the Schema for the PolicyV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type PolicyV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyV1Spec   `json:"spec"`
	Status            PolicyV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyV1List contains a list of PolicyV1s
type PolicyV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyV1 `json:"items"`
}

// Repository type metadata.
var (
	PolicyV1_Kind             = "PolicyV1"
	PolicyV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyV1_Kind}.String()
	PolicyV1_KindAPIVersion   = PolicyV1_Kind + "." + CRDGroupVersion.String()
	PolicyV1_GroupVersionKind = CRDGroupVersion.WithKind(PolicyV1_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyV1{}, &PolicyV1List{})
}
