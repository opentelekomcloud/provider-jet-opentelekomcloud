/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataVolumesObservation struct {
}

type DataVolumesParameters struct {

	// +kubebuilder:validation:Optional
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// +kubebuilder:validation:Optional
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// +kubebuilder:validation:Required
	Size *int64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	Volumetype *string `json:"volumetype" tf:"volumetype,omitempty"`
}

type NodePoolV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NodePoolV3Parameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Required
	DataVolumes []DataVolumesParameters `json:"dataVolumes" tf:"data_volumes,omitempty"`

	// +kubebuilder:validation:Optional
	DockerBaseSize *int64 `json:"dockerBaseSize,omitempty" tf:"docker_base_size,omitempty"`

	// +kubebuilder:validation:Optional
	DockerLvmConfigOverride *string `json:"dockerLvmConfigOverride,omitempty" tf:"docker_lvm_config_override,omitempty"`

	// +kubebuilder:validation:Required
	Flavor *string `json:"flavor" tf:"flavor,omitempty"`

	// +kubebuilder:validation:Required
	InitialNodeCount *int64 `json:"initialNodeCount" tf:"initial_node_count,omitempty"`

	// +kubebuilder:validation:Optional
	K8STags map[string]*string `json:"k8sTags,omitempty" tf:"k8s_tags,omitempty"`

	// +kubebuilder:validation:Optional
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// +kubebuilder:validation:Optional
	MaxNodeCount *int64 `json:"maxNodeCount,omitempty" tf:"max_node_count,omitempty"`

	// +kubebuilder:validation:Optional
	MaxPods *int64 `json:"maxPods,omitempty" tf:"max_pods,omitempty"`

	// +kubebuilder:validation:Optional
	MinNodeCount *int64 `json:"minNodeCount,omitempty" tf:"min_node_count,omitempty"`

	// +kubebuilder:validation:Optional
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Postinstall *string `json:"postinstall,omitempty" tf:"postinstall,omitempty"`

	// +kubebuilder:validation:Optional
	Preinstall *string `json:"preinstall,omitempty" tf:"preinstall,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *int64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	RootVolume []RootVolumeParameters `json:"rootVolume" tf:"root_volume,omitempty"`

	// +kubebuilder:validation:Optional
	ScaleDownCooldownTime *int64 `json:"scaleDownCooldownTime,omitempty" tf:"scale_down_cooldown_time,omitempty"`

	// +kubebuilder:validation:Optional
	ScaleEnable *bool `json:"scaleEnable,omitempty" tf:"scale_enable,omitempty"`

	// +kubebuilder:validation:Optional
	ServerGroupReference *string `json:"serverGroupReference,omitempty" tf:"server_group_reference,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	Taints []TaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// +kubebuilder:validation:Optional
	UserTags map[string]string `json:"userTags,omitempty" tf:"user_tags,omitempty"`
}

type RootVolumeObservation struct {
}

type RootVolumeParameters struct {

	// +kubebuilder:validation:Optional
	ExtendParam *string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// +kubebuilder:validation:Required
	Size *int64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	Volumetype *string `json:"volumetype" tf:"volumetype,omitempty"`
}

type TaintsObservation struct {
}

type TaintsParameters struct {

	// +kubebuilder:validation:Required
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// NodePoolV3Spec defines the desired state of NodePoolV3
type NodePoolV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodePoolV3Parameters `json:"forProvider"`
}

// NodePoolV3Status defines the observed state of NodePoolV3.
type NodePoolV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodePoolV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NodePoolV3 is the Schema for the NodePoolV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type NodePoolV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodePoolV3Spec   `json:"spec"`
	Status            NodePoolV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodePoolV3List contains a list of NodePoolV3s
type NodePoolV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodePoolV3 `json:"items"`
}

// Repository type metadata.
var (
	NodePoolV3_Kind             = "NodePoolV3"
	NodePoolV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodePoolV3_Kind}.String()
	NodePoolV3_KindAPIVersion   = NodePoolV3_Kind + "." + CRDGroupVersion.String()
	NodePoolV3_GroupVersionKind = CRDGroupVersion.WithKind(NodePoolV3_Kind)
)

func init() {
	SchemeBuilder.Register(&NodePoolV3{}, &NodePoolV3List{})
}
