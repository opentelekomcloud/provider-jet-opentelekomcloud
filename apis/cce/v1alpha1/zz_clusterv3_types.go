/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthenticatingProxyObservation struct {
}

type AuthenticatingProxyParameters struct {

	// +kubebuilder:validation:Required
	CA *string `json:"ca" tf:"ca,omitempty"`

	// +kubebuilder:validation:Required
	Cert *string `json:"cert" tf:"cert,omitempty"`

	// +kubebuilder:validation:Required
	PrivateKey *string `json:"privateKey" tf:"private_key,omitempty"`
}

type CertificateClustersObservation struct {
	CertificateAuthorityData *string `json:"certificateAuthorityData,omitempty" tf:"certificate_authority_data,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Server *string `json:"server,omitempty" tf:"server,omitempty"`
}

type CertificateClustersParameters struct {
}

type CertificateUsersObservation struct {
	ClientCertificateData *string `json:"clientCertificateData,omitempty" tf:"client_certificate_data,omitempty"`

	ClientKeyData *string `json:"clientKeyData,omitempty" tf:"client_key_data,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CertificateUsersParameters struct {
}

type ClusterV3Observation struct {
	CertificateClusters []CertificateClustersObservation `json:"certificateClusters,omitempty" tf:"certificate_clusters,omitempty"`

	CertificateUsers []CertificateUsersObservation `json:"certificateUsers,omitempty" tf:"certificate_users,omitempty"`

	External *string `json:"external,omitempty" tf:"external,omitempty"`

	ExternalOtc *string `json:"externalOtc,omitempty" tf:"external_otc,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstalledAddons []*string `json:"installedAddons,omitempty" tf:"installed_addons,omitempty"`

	Internal *string `json:"internal,omitempty" tf:"internal,omitempty"`

	KubeProxyMode *string `json:"kubeProxyMode,omitempty" tf:"kube_proxy_mode,omitempty"`

	SecurityGroupControl *string `json:"securityGroupControl,omitempty" tf:"security_group_control,omitempty"`

	SecurityGroupNode *string `json:"securityGroupNode,omitempty" tf:"security_group_node,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ClusterV3Parameters struct {

	// +kubebuilder:validation:Optional
	Annotations map[string]string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Optional
	AuthenticatingProxy []AuthenticatingProxyParameters `json:"authenticatingProxy,omitempty" tf:"authenticating_proxy,omitempty"`

	// +kubebuilder:validation:Optional
	AuthenticatingProxyCA *string `json:"authenticatingProxyCa,omitempty" tf:"authenticating_proxy_ca,omitempty"`

	// +kubebuilder:validation:Optional
	AuthenticationMode *string `json:"authenticationMode,omitempty" tf:"authentication_mode,omitempty"`

	// +kubebuilder:validation:Optional
	BillingMode *int64 `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// +kubebuilder:validation:Required
	ClusterType *string `json:"clusterType" tf:"cluster_type,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// +kubebuilder:validation:Optional
	ContainerNetworkCidr *string `json:"containerNetworkCidr,omitempty" tf:"container_network_cidr,omitempty"`

	// +kubebuilder:validation:Required
	ContainerNetworkType *string `json:"containerNetworkType" tf:"container_network_type,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EIP *string `json:"eip,omitempty" tf:"eip,omitempty"`

	// +kubebuilder:validation:Optional
	ExtendParam map[string]string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// +kubebuilder:validation:Required
	FlavorID *string `json:"flavorId" tf:"flavor_id,omitempty"`

	// +kubebuilder:validation:Optional
	HighwaySubnetID *string `json:"highwaySubnetId,omitempty" tf:"highway_subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	IgnoreAddons *bool `json:"ignoreAddons,omitempty" tf:"ignore_addons,omitempty"`

	// +kubebuilder:validation:Optional
	KubernetesSvcIPRange *string `json:"kubernetesSvcIpRange,omitempty" tf:"kubernetes_svc_ip_range,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	MultiAz *bool `json:"multiAz,omitempty" tf:"multi_az,omitempty"`

	// +kubebuilder:validation:Optional
	NoAddons *bool `json:"noAddons,omitempty" tf:"no_addons,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// ClusterV3Spec defines the desired state of ClusterV3
type ClusterV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterV3Parameters `json:"forProvider"`
}

// ClusterV3Status defines the observed state of ClusterV3.
type ClusterV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterV3 is the Schema for the ClusterV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type ClusterV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterV3Spec   `json:"spec"`
	Status            ClusterV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterV3List contains a list of ClusterV3s
type ClusterV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterV3 `json:"items"`
}

// Repository type metadata.
var (
	ClusterV3_Kind             = "ClusterV3"
	ClusterV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterV3_Kind}.String()
	ClusterV3_KindAPIVersion   = ClusterV3_Kind + "." + CRDGroupVersion.String()
	ClusterV3_GroupVersionKind = CRDGroupVersion.WithKind(ClusterV3_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterV3{}, &ClusterV3List{})
}
