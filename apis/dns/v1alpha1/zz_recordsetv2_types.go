/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RecordsetV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`
}

type RecordsetV2Parameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Records []*string `json:"records" tf:"records,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *int64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSpecs map[string]string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// RecordsetV2Spec defines the desired state of RecordsetV2
type RecordsetV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RecordsetV2Parameters `json:"forProvider"`
}

// RecordsetV2Status defines the observed state of RecordsetV2.
type RecordsetV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RecordsetV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RecordsetV2 is the Schema for the RecordsetV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type RecordsetV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RecordsetV2Spec   `json:"spec"`
	Status            RecordsetV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RecordsetV2List contains a list of RecordsetV2s
type RecordsetV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RecordsetV2 `json:"items"`
}

// Repository type metadata.
var (
	RecordsetV2_Kind             = "RecordsetV2"
	RecordsetV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RecordsetV2_Kind}.String()
	RecordsetV2_KindAPIVersion   = RecordsetV2_Kind + "." + CRDGroupVersion.String()
	RecordsetV2_GroupVersionKind = CRDGroupVersion.WithKind(RecordsetV2_Kind)
)

func init() {
	SchemeBuilder.Register(&RecordsetV2{}, &RecordsetV2List{})
}
