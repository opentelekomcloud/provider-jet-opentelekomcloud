/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FlowLogV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FlowLogV1Parameters struct {

	// +kubebuilder:validation:Optional
	AdminState *bool `json:"adminState,omitempty" tf:"admin_state,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	LogGroupID *string `json:"logGroupId" tf:"log_group_id,omitempty"`

	// +kubebuilder:validation:Required
	LogTopicID *string `json:"logTopicId" tf:"log_topic_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	TrafficType *string `json:"trafficType" tf:"traffic_type,omitempty"`
}

// FlowLogV1Spec defines the desired state of FlowLogV1
type FlowLogV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FlowLogV1Parameters `json:"forProvider"`
}

// FlowLogV1Status defines the observed state of FlowLogV1.
type FlowLogV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FlowLogV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FlowLogV1 is the Schema for the FlowLogV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type FlowLogV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FlowLogV1Spec   `json:"spec"`
	Status            FlowLogV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FlowLogV1List contains a list of FlowLogV1s
type FlowLogV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FlowLogV1 `json:"items"`
}

// Repository type metadata.
var (
	FlowLogV1_Kind             = "FlowLogV1"
	FlowLogV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FlowLogV1_Kind}.String()
	FlowLogV1_KindAPIVersion   = FlowLogV1_Kind + "." + CRDGroupVersion.String()
	FlowLogV1_GroupVersionKind = CRDGroupVersion.WithKind(FlowLogV1_Kind)
)

func init() {
	SchemeBuilder.Register(&FlowLogV1{}, &FlowLogV1List{})
}
