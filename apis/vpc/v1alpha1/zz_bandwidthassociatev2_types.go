/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BandwidthAssociateV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BandwidthAssociateV2Parameters struct {

	// +kubebuilder:validation:Optional
	BackupChargeMode *string `json:"backupChargeMode,omitempty" tf:"backup_charge_mode,omitempty"`

	// +kubebuilder:validation:Optional
	BackupSize *int64 `json:"backupSize,omitempty" tf:"backup_size,omitempty"`

	// +kubebuilder:validation:Required
	Bandwidth *string `json:"bandwidth" tf:"bandwidth,omitempty"`

	// +kubebuilder:validation:Required
	FloatingIps []*string `json:"floatingIps" tf:"floating_ips,omitempty"`
}

// BandwidthAssociateV2Spec defines the desired state of BandwidthAssociateV2
type BandwidthAssociateV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BandwidthAssociateV2Parameters `json:"forProvider"`
}

// BandwidthAssociateV2Status defines the observed state of BandwidthAssociateV2.
type BandwidthAssociateV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BandwidthAssociateV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthAssociateV2 is the Schema for the BandwidthAssociateV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type BandwidthAssociateV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BandwidthAssociateV2Spec   `json:"spec"`
	Status            BandwidthAssociateV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthAssociateV2List contains a list of BandwidthAssociateV2s
type BandwidthAssociateV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BandwidthAssociateV2 `json:"items"`
}

// Repository type metadata.
var (
	BandwidthAssociateV2_Kind             = "BandwidthAssociateV2"
	BandwidthAssociateV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BandwidthAssociateV2_Kind}.String()
	BandwidthAssociateV2_KindAPIVersion   = BandwidthAssociateV2_Kind + "." + CRDGroupVersion.String()
	BandwidthAssociateV2_GroupVersionKind = CRDGroupVersion.WithKind(BandwidthAssociateV2_Kind)
)

func init() {
	SchemeBuilder.Register(&BandwidthAssociateV2{}, &BandwidthAssociateV2List{})
}
