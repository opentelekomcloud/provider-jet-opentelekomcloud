/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BandwidthV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type BandwidthV2Parameters struct {

	// +kubebuilder:validation:Required
	Size *int64 `json:"size" tf:"size,omitempty"`
}

// BandwidthV2Spec defines the desired state of BandwidthV2
type BandwidthV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BandwidthV2Parameters `json:"forProvider"`
}

// BandwidthV2Status defines the observed state of BandwidthV2.
type BandwidthV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BandwidthV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthV2 is the Schema for the BandwidthV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type BandwidthV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BandwidthV2Spec   `json:"spec"`
	Status            BandwidthV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthV2List contains a list of BandwidthV2s
type BandwidthV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BandwidthV2 `json:"items"`
}

// Repository type metadata.
var (
	BandwidthV2_Kind             = "BandwidthV2"
	BandwidthV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BandwidthV2_Kind}.String()
	BandwidthV2_KindAPIVersion   = BandwidthV2_Kind + "." + CRDGroupVersion.String()
	BandwidthV2_GroupVersionKind = CRDGroupVersion.WithKind(BandwidthV2_Kind)
)

func init() {
	SchemeBuilder.Register(&BandwidthV2{}, &BandwidthV2List{})
}
