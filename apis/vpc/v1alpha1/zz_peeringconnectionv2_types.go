/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PeeringConnectionV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type PeeringConnectionV2Parameters struct {

	// +kubebuilder:validation:Optional
	PeerTenantID *string `json:"peerTenantId,omitempty" tf:"peer_tenant_id,omitempty"`

	// +kubebuilder:validation:Required
	PeerVPCID *string `json:"peerVpcId" tf:"peer_vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// PeeringConnectionV2Spec defines the desired state of PeeringConnectionV2
type PeeringConnectionV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PeeringConnectionV2Parameters `json:"forProvider"`
}

// PeeringConnectionV2Status defines the observed state of PeeringConnectionV2.
type PeeringConnectionV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PeeringConnectionV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PeeringConnectionV2 is the Schema for the PeeringConnectionV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type PeeringConnectionV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PeeringConnectionV2Spec   `json:"spec"`
	Status            PeeringConnectionV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PeeringConnectionV2List contains a list of PeeringConnectionV2s
type PeeringConnectionV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PeeringConnectionV2 `json:"items"`
}

// Repository type metadata.
var (
	PeeringConnectionV2_Kind             = "PeeringConnectionV2"
	PeeringConnectionV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PeeringConnectionV2_Kind}.String()
	PeeringConnectionV2_KindAPIVersion   = PeeringConnectionV2_Kind + "." + CRDGroupVersion.String()
	PeeringConnectionV2_GroupVersionKind = CRDGroupVersion.WithKind(PeeringConnectionV2_Kind)
)

func init() {
	SchemeBuilder.Register(&PeeringConnectionV2{}, &PeeringConnectionV2List{})
}
