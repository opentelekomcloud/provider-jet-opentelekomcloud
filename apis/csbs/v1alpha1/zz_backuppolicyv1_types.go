/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupPolicyV1Observation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type BackupPolicyV1Parameters struct {

	// +kubebuilder:validation:Optional
	Common map[string]string `json:"common,omitempty" tf:"common,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	Resource []ResourceParameters `json:"resource" tf:"resource,omitempty"`

	// +kubebuilder:validation:Required
	ScheduledOperation []ScheduledOperationParameters `json:"scheduledOperation" tf:"scheduled_operation,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ResourceObservation struct {
}

type ResourceParameters struct {

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type ScheduledOperationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TriggerID *string `json:"triggerId,omitempty" tf:"trigger_id,omitempty"`

	TriggerName *string `json:"triggerName,omitempty" tf:"trigger_name,omitempty"`

	TriggerType *string `json:"triggerType,omitempty" tf:"trigger_type,omitempty"`
}

type ScheduledOperationParameters struct {

	// +kubebuilder:validation:Optional
	DayBackups *int64 `json:"dayBackups,omitempty" tf:"day_backups,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	MaxBackups *int64 `json:"maxBackups,omitempty" tf:"max_backups,omitempty"`

	// +kubebuilder:validation:Optional
	MonthBackups *int64 `json:"monthBackups,omitempty" tf:"month_backups,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	OperationType *string `json:"operationType" tf:"operation_type,omitempty"`

	// +kubebuilder:validation:Optional
	Permanent *bool `json:"permanent,omitempty" tf:"permanent,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionDurationDays *int64 `json:"retentionDurationDays,omitempty" tf:"retention_duration_days,omitempty"`

	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// +kubebuilder:validation:Required
	TriggerPattern *string `json:"triggerPattern" tf:"trigger_pattern,omitempty"`

	// +kubebuilder:validation:Optional
	WeekBackups *int64 `json:"weekBackups,omitempty" tf:"week_backups,omitempty"`

	// +kubebuilder:validation:Optional
	YearBackups *int64 `json:"yearBackups,omitempty" tf:"year_backups,omitempty"`
}

type TagsObservation struct {
}

type TagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// BackupPolicyV1Spec defines the desired state of BackupPolicyV1
type BackupPolicyV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupPolicyV1Parameters `json:"forProvider"`
}

// BackupPolicyV1Status defines the observed state of BackupPolicyV1.
type BackupPolicyV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupPolicyV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyV1 is the Schema for the BackupPolicyV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type BackupPolicyV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupPolicyV1Spec   `json:"spec"`
	Status            BackupPolicyV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyV1List contains a list of BackupPolicyV1s
type BackupPolicyV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupPolicyV1 `json:"items"`
}

// Repository type metadata.
var (
	BackupPolicyV1_Kind             = "BackupPolicyV1"
	BackupPolicyV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupPolicyV1_Kind}.String()
	BackupPolicyV1_KindAPIVersion   = BackupPolicyV1_Kind + "." + CRDGroupVersion.String()
	BackupPolicyV1_GroupVersionKind = CRDGroupVersion.WithKind(BackupPolicyV1_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupPolicyV1{}, &BackupPolicyV1List{})
}
