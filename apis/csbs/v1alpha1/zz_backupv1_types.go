/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupV1Observation struct {
	BackupRecordID *string `json:"backupRecordId,omitempty" tf:"backup_record_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	VMMetadata []VMMetadataObservation `json:"vmMetadata,omitempty" tf:"vm_metadata,omitempty"`

	VolumeBackups []VolumeBackupsObservation `json:"volumeBackups,omitempty" tf:"volume_backups,omitempty"`
}

type BackupV1Parameters struct {

	// +kubebuilder:validation:Optional
	BackupName *string `json:"backupName,omitempty" tf:"backup_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []BackupV1TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type BackupV1TagsObservation struct {
}

type BackupV1TagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type VMMetadataObservation struct {
	CloudServiceType *string `json:"cloudServiceType,omitempty" tf:"cloud_service_type,omitempty"`

	Disk *int64 `json:"disk,omitempty" tf:"disk,omitempty"`

	EIP *string `json:"eip,omitempty" tf:"eip,omitempty"`

	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	RAM *int64 `json:"ram,omitempty" tf:"ram,omitempty"`

	Vcpus *int64 `json:"vcpus,omitempty" tf:"vcpus,omitempty"`
}

type VMMetadataParameters struct {
}

type VolumeBackupsObservation struct {
	AverageSpeed *int64 `json:"averageSpeed,omitempty" tf:"average_speed,omitempty"`

	Bootable *bool `json:"bootable,omitempty" tf:"bootable,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ImageType *string `json:"imageType,omitempty" tf:"image_type,omitempty"`

	Incremental *bool `json:"incremental,omitempty" tf:"incremental,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Size *int64 `json:"size,omitempty" tf:"size,omitempty"`

	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	SourceVolumeID *string `json:"sourceVolumeId,omitempty" tf:"source_volume_id,omitempty"`

	SourceVolumeName *string `json:"sourceVolumeName,omitempty" tf:"source_volume_name,omitempty"`

	SourceVolumeSize *int64 `json:"sourceVolumeSize,omitempty" tf:"source_volume_size,omitempty"`

	SpaceSavingRatio *int64 `json:"spaceSavingRatio,omitempty" tf:"space_saving_ratio,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VolumeBackupsParameters struct {
}

// BackupV1Spec defines the desired state of BackupV1
type BackupV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupV1Parameters `json:"forProvider"`
}

// BackupV1Status defines the observed state of BackupV1.
type BackupV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupV1 is the Schema for the BackupV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type BackupV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupV1Spec   `json:"spec"`
	Status            BackupV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupV1List contains a list of BackupV1s
type BackupV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupV1 `json:"items"`
}

// Repository type metadata.
var (
	BackupV1_Kind             = "BackupV1"
	BackupV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupV1_Kind}.String()
	BackupV1_KindAPIVersion   = BackupV1_Kind + "." + CRDGroupVersion.String()
	BackupV1_GroupVersionKind = CRDGroupVersion.WithKind(BackupV1_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupV1{}, &BackupV1List{})
}
