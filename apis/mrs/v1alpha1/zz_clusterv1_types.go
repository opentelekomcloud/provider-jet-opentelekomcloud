/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AddJobsObservation struct {
}

type AddJobsParameters struct {

	// +kubebuilder:validation:Optional
	Arguments *string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// +kubebuilder:validation:Optional
	FileAction *string `json:"fileAction,omitempty" tf:"file_action,omitempty"`

	// +kubebuilder:validation:Optional
	HiveScriptPath *string `json:"hiveScriptPath,omitempty" tf:"hive_script_path,omitempty"`

	// +kubebuilder:validation:Optional
	Hql *string `json:"hql,omitempty" tf:"hql,omitempty"`

	// +kubebuilder:validation:Optional
	Input *string `json:"input,omitempty" tf:"input,omitempty"`

	// +kubebuilder:validation:Required
	JarPath *string `json:"jarPath" tf:"jar_path,omitempty"`

	// +kubebuilder:validation:Optional
	JobLog *string `json:"jobLog,omitempty" tf:"job_log,omitempty"`

	// +kubebuilder:validation:Required
	JobName *string `json:"jobName" tf:"job_name,omitempty"`

	// +kubebuilder:validation:Required
	JobType *int64 `json:"jobType" tf:"job_type,omitempty"`

	// +kubebuilder:validation:Optional
	Output *string `json:"output,omitempty" tf:"output,omitempty"`

	// +kubebuilder:validation:Optional
	ShutdownCluster *bool `json:"shutdownCluster,omitempty" tf:"shutdown_cluster,omitempty"`

	// +kubebuilder:validation:Required
	SubmitJobOnceClusterRun *bool `json:"submitJobOnceClusterRun" tf:"submit_job_once_cluster_run,omitempty"`
}

type BootstrapScriptsObservation struct {
}

type BootstrapScriptsParameters struct {

	// +kubebuilder:validation:Optional
	ActiveMaster *bool `json:"activeMaster,omitempty" tf:"active_master,omitempty"`

	// +kubebuilder:validation:Optional
	BeforeComponentStart *bool `json:"beforeComponentStart,omitempty" tf:"before_component_start,omitempty"`

	// +kubebuilder:validation:Required
	FailAction *string `json:"failAction" tf:"fail_action,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Nodes []*string `json:"nodes" tf:"nodes,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type ClusterV1Observation struct {
	AvailableZoneName *string `json:"availableZoneName,omitempty" tf:"available_zone_name,omitempty"`

	ChargingStartTime *string `json:"chargingStartTime,omitempty" tf:"charging_start_time,omitempty"`

	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ClusterState *string `json:"clusterState,omitempty" tf:"cluster_state,omitempty"`

	CoreNodeProductID *string `json:"coreNodeProductId,omitempty" tf:"core_node_product_id,omitempty"`

	CoreNodeSpecID *string `json:"coreNodeSpecId,omitempty" tf:"core_node_spec_id,omitempty"`

	CreateAt *string `json:"createAt,omitempty" tf:"create_at,omitempty"`

	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	ErrorInfo *string `json:"errorInfo,omitempty" tf:"error_info,omitempty"`

	ExternalAlternateIP *string `json:"externalAlternateIp,omitempty" tf:"external_alternate_ip,omitempty"`

	ExternalIP *string `json:"externalIp,omitempty" tf:"external_ip,omitempty"`

	Fee *string `json:"fee,omitempty" tf:"fee,omitempty"`

	HadoopVersion *string `json:"hadoopVersion,omitempty" tf:"hadoop_version,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	InternalIP *string `json:"internalIp,omitempty" tf:"internal_ip,omitempty"`

	MasterNodeIP *string `json:"masterNodeIp,omitempty" tf:"master_node_ip,omitempty"`

	MasterNodeProductID *string `json:"masterNodeProductId,omitempty" tf:"master_node_product_id,omitempty"`

	MasterNodeSpecID *string `json:"masterNodeSpecId,omitempty" tf:"master_node_spec_id,omitempty"`

	OrderID *string `json:"orderId,omitempty" tf:"order_id,omitempty"`

	PrivateIPFirst *string `json:"privateIpFirst,omitempty" tf:"private_ip_first,omitempty"`

	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	SecurityGroupsID *string `json:"securityGroupsId,omitempty" tf:"security_groups_id,omitempty"`

	SlaveSecurityGroupsID *string `json:"slaveSecurityGroupsId,omitempty" tf:"slave_security_groups_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	UpdateAt *string `json:"updateAt,omitempty" tf:"update_at,omitempty"`

	Vnc *string `json:"vnc,omitempty" tf:"vnc,omitempty"`
}

type ClusterV1Parameters struct {

	// +kubebuilder:validation:Optional
	AddJobs []AddJobsParameters `json:"addJobs,omitempty" tf:"add_jobs,omitempty"`

	// +kubebuilder:validation:Required
	AvailableZoneID *string `json:"availableZoneId" tf:"available_zone_id,omitempty"`

	// +kubebuilder:validation:Required
	BillingType *int64 `json:"billingType" tf:"billing_type,omitempty"`

	// +kubebuilder:validation:Optional
	BootstrapScripts []BootstrapScriptsParameters `json:"bootstrapScripts,omitempty" tf:"bootstrap_scripts,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterAdminSecret *string `json:"clusterAdminSecret,omitempty" tf:"cluster_admin_secret,omitempty"`

	// +kubebuilder:validation:Required
	ClusterName *string `json:"clusterName" tf:"cluster_name,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterType *int64 `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// +kubebuilder:validation:Required
	ComponentList []ComponentListParameters `json:"componentList" tf:"component_list,omitempty"`

	// +kubebuilder:validation:Optional
	CoreDataVolumeCount *int64 `json:"coreDataVolumeCount,omitempty" tf:"core_data_volume_count,omitempty"`

	// +kubebuilder:validation:Optional
	CoreDataVolumeSize *int64 `json:"coreDataVolumeSize,omitempty" tf:"core_data_volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	CoreDataVolumeType *string `json:"coreDataVolumeType,omitempty" tf:"core_data_volume_type,omitempty"`

	// +kubebuilder:validation:Required
	CoreNodeNum *int64 `json:"coreNodeNum" tf:"core_node_num,omitempty"`

	// +kubebuilder:validation:Required
	CoreNodeSize *string `json:"coreNodeSize" tf:"core_node_size,omitempty"`

	// +kubebuilder:validation:Optional
	LogCollection *int64 `json:"logCollection,omitempty" tf:"log_collection,omitempty"`

	// +kubebuilder:validation:Optional
	MasterDataVolumeCount *int64 `json:"masterDataVolumeCount,omitempty" tf:"master_data_volume_count,omitempty"`

	// +kubebuilder:validation:Optional
	MasterDataVolumeSize *int64 `json:"masterDataVolumeSize,omitempty" tf:"master_data_volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	MasterDataVolumeType *string `json:"masterDataVolumeType,omitempty" tf:"master_data_volume_type,omitempty"`

	// +kubebuilder:validation:Required
	MasterNodeNum *int64 `json:"masterNodeNum" tf:"master_node_num,omitempty"`

	// +kubebuilder:validation:Required
	MasterNodeSize *string `json:"masterNodeSize" tf:"master_node_size,omitempty"`

	// +kubebuilder:validation:Required
	NodePublicCertName *string `json:"nodePublicCertName" tf:"node_public_cert_name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	SafeMode *int64 `json:"safeMode" tf:"safe_mode,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type ComponentListObservation struct {
	ComponentDesc *string `json:"componentDesc,omitempty" tf:"component_desc,omitempty"`

	ComponentID *string `json:"componentId,omitempty" tf:"component_id,omitempty"`

	ComponentVersion *string `json:"componentVersion,omitempty" tf:"component_version,omitempty"`
}

type ComponentListParameters struct {

	// +kubebuilder:validation:Required
	ComponentName *string `json:"componentName" tf:"component_name,omitempty"`
}

// ClusterV1Spec defines the desired state of ClusterV1
type ClusterV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterV1Parameters `json:"forProvider"`
}

// ClusterV1Status defines the observed state of ClusterV1.
type ClusterV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterV1 is the Schema for the ClusterV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type ClusterV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterV1Spec   `json:"spec"`
	Status            ClusterV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterV1List contains a list of ClusterV1s
type ClusterV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterV1 `json:"items"`
}

// Repository type metadata.
var (
	ClusterV1_Kind             = "ClusterV1"
	ClusterV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterV1_Kind}.String()
	ClusterV1_KindAPIVersion   = ClusterV1_Kind + "." + CRDGroupVersion.String()
	ClusterV1_GroupVersionKind = CRDGroupVersion.WithKind(ClusterV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterV1{}, &ClusterV1List{})
}
