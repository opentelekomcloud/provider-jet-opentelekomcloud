/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageAccessAcceptV2Observation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ImageAccessAcceptV2Parameters struct {

	// +kubebuilder:validation:Required
	ImageID *string `json:"imageId" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Required
	MemberID *string `json:"memberId" tf:"member_id,omitempty"`

	// +kubebuilder:validation:Required
	Status *string `json:"status" tf:"status,omitempty"`
}

// ImageAccessAcceptV2Spec defines the desired state of ImageAccessAcceptV2
type ImageAccessAcceptV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageAccessAcceptV2Parameters `json:"forProvider"`
}

// ImageAccessAcceptV2Status defines the observed state of ImageAccessAcceptV2.
type ImageAccessAcceptV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageAccessAcceptV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImageAccessAcceptV2 is the Schema for the ImageAccessAcceptV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type ImageAccessAcceptV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageAccessAcceptV2Spec   `json:"spec"`
	Status            ImageAccessAcceptV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageAccessAcceptV2List contains a list of ImageAccessAcceptV2s
type ImageAccessAcceptV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageAccessAcceptV2 `json:"items"`
}

// Repository type metadata.
var (
	ImageAccessAcceptV2_Kind             = "ImageAccessAcceptV2"
	ImageAccessAcceptV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImageAccessAcceptV2_Kind}.String()
	ImageAccessAcceptV2_KindAPIVersion   = ImageAccessAcceptV2_Kind + "." + CRDGroupVersion.String()
	ImageAccessAcceptV2_GroupVersionKind = CRDGroupVersion.WithKind(ImageAccessAcceptV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ImageAccessAcceptV2{}, &ImageAccessAcceptV2List{})
}
