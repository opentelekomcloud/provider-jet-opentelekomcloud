/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProtectedInstanceV1Observation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PriorityStation *string `json:"priorityStation,omitempty" tf:"priority_station,omitempty"`

	TargetID *string `json:"targetId,omitempty" tf:"target_id,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ProtectedInstanceV1Parameters struct {

	// +kubebuilder:validation:Optional
	DeleteTargetEIP *bool `json:"deleteTargetEip,omitempty" tf:"delete_target_eip,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteTargetServer *bool `json:"deleteTargetServer,omitempty" tf:"delete_target_server,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	GroupID *string `json:"groupId" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// +kubebuilder:validation:Required
	ServerID *string `json:"serverId" tf:"server_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ProtectedInstanceV1Spec defines the desired state of ProtectedInstanceV1
type ProtectedInstanceV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProtectedInstanceV1Parameters `json:"forProvider"`
}

// ProtectedInstanceV1Status defines the observed state of ProtectedInstanceV1.
type ProtectedInstanceV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProtectedInstanceV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectedInstanceV1 is the Schema for the ProtectedInstanceV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type ProtectedInstanceV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProtectedInstanceV1Spec   `json:"spec"`
	Status            ProtectedInstanceV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectedInstanceV1List contains a list of ProtectedInstanceV1s
type ProtectedInstanceV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProtectedInstanceV1 `json:"items"`
}

// Repository type metadata.
var (
	ProtectedInstanceV1_Kind             = "ProtectedInstanceV1"
	ProtectedInstanceV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProtectedInstanceV1_Kind}.String()
	ProtectedInstanceV1_KindAPIVersion   = ProtectedInstanceV1_Kind + "." + CRDGroupVersion.String()
	ProtectedInstanceV1_GroupVersionKind = CRDGroupVersion.WithKind(ProtectedInstanceV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ProtectedInstanceV1{}, &ProtectedInstanceV1List{})
}
