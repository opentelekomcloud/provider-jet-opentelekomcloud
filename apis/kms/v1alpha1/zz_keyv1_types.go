/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyV1Observation struct {
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	DefaultKeyFlag *string `json:"defaultKeyFlag,omitempty" tf:"default_key_flag,omitempty"`

	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	ScheduledDeletionDate *string `json:"scheduledDeletionDate,omitempty" tf:"scheduled_deletion_date,omitempty"`
}

type KeyV1Parameters struct {

	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// +kubebuilder:validation:Required
	KeyAlias *string `json:"keyAlias" tf:"key_alias,omitempty"`

	// +kubebuilder:validation:Optional
	KeyDescription *string `json:"keyDescription,omitempty" tf:"key_description,omitempty"`

	// +kubebuilder:validation:Optional
	PendingDays *string `json:"pendingDays,omitempty" tf:"pending_days,omitempty"`

	// +kubebuilder:validation:Optional
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// KeyV1Spec defines the desired state of KeyV1
type KeyV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyV1Parameters `json:"forProvider"`
}

// KeyV1Status defines the observed state of KeyV1.
type KeyV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyV1 is the Schema for the KeyV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type KeyV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyV1Spec   `json:"spec"`
	Status            KeyV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyV1List contains a list of KeyV1s
type KeyV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyV1 `json:"items"`
}

// Repository type metadata.
var (
	KeyV1_Kind             = "KeyV1"
	KeyV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyV1_Kind}.String()
	KeyV1_KindAPIVersion   = KeyV1_Kind + "." + CRDGroupVersion.String()
	KeyV1_GroupVersionKind = CRDGroupVersion.WithKind(KeyV1_Kind)
)

func init() {
	SchemeBuilder.Register(&KeyV1{}, &KeyV1List{})
}
