/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GrantV1Observation struct {
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IssuingPrincipal *string `json:"issuingPrincipal,omitempty" tf:"issuing_principal,omitempty"`
}

type GrantV1Parameters struct {

	// +kubebuilder:validation:Required
	GranteePrincipal *string `json:"granteePrincipal" tf:"grantee_principal,omitempty"`

	// +kubebuilder:validation:Required
	KeyID *string `json:"keyId" tf:"key_id,omitempty"`

	// +kubebuilder:validation:Optional
	Operations []*string `json:"operations,omitempty" tf:"operations,omitempty"`

	// +kubebuilder:validation:Optional
	RetiringPrincipal *string `json:"retiringPrincipal,omitempty" tf:"retiring_principal,omitempty"`
}

// GrantV1Spec defines the desired state of GrantV1
type GrantV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GrantV1Parameters `json:"forProvider"`
}

// GrantV1Status defines the observed state of GrantV1.
type GrantV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GrantV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GrantV1 is the Schema for the GrantV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type GrantV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GrantV1Spec   `json:"spec"`
	Status            GrantV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GrantV1List contains a list of GrantV1s
type GrantV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GrantV1 `json:"items"`
}

// Repository type metadata.
var (
	GrantV1_Kind             = "GrantV1"
	GrantV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GrantV1_Kind}.String()
	GrantV1_KindAPIVersion   = GrantV1_Kind + "." + CRDGroupVersion.String()
	GrantV1_GroupVersionKind = CRDGroupVersion.WithKind(GrantV1_Kind)
)

func init() {
	SchemeBuilder.Register(&GrantV1{}, &GrantV1List{})
}
