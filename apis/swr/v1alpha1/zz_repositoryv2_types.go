/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InternalPath *string `json:"internalPath,omitempty" tf:"internal_path,omitempty"`

	NumImages *int64 `json:"numImages,omitempty" tf:"num_images,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	RepositoryID *int64 `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	Size *int64 `json:"size,omitempty" tf:"size,omitempty"`
}

type RepositoryV2Parameters struct {

	// +kubebuilder:validation:Optional
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	IsPublic *bool `json:"isPublic" tf:"is_public,omitempty"`

	// +kubebuilder:validation:Required
	Organization *string `json:"organization" tf:"organization,omitempty"`
}

// RepositoryV2Spec defines the desired state of RepositoryV2
type RepositoryV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryV2Parameters `json:"forProvider"`
}

// RepositoryV2Status defines the observed state of RepositoryV2.
type RepositoryV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryV2 is the Schema for the RepositoryV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type RepositoryV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RepositoryV2Spec   `json:"spec"`
	Status            RepositoryV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryV2List contains a list of RepositoryV2s
type RepositoryV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryV2 `json:"items"`
}

// Repository type metadata.
var (
	RepositoryV2_Kind             = "RepositoryV2"
	RepositoryV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryV2_Kind}.String()
	RepositoryV2_KindAPIVersion   = RepositoryV2_Kind + "." + CRDGroupVersion.String()
	RepositoryV2_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryV2_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryV2{}, &RepositoryV2List{})
}
