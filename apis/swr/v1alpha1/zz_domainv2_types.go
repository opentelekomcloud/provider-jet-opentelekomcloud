/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainV2Observation struct {
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	CreatorID *string `json:"creatorId,omitempty" tf:"creator_id,omitempty"`

	CreatorName *string `json:"creatorName,omitempty" tf:"creator_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *bool `json:"status,omitempty" tf:"status,omitempty"`

	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type DomainV2Parameters struct {

	// +kubebuilder:validation:Required
	AccessDomain *string `json:"accessDomain" tf:"access_domain,omitempty"`

	// +kubebuilder:validation:Required
	Deadline *string `json:"deadline" tf:"deadline,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Organization *string `json:"organization" tf:"organization,omitempty"`

	// +kubebuilder:validation:Required
	Permission *string `json:"permission" tf:"permission,omitempty"`

	// +kubebuilder:validation:Required
	Repository *string `json:"repository" tf:"repository,omitempty"`
}

// DomainV2Spec defines the desired state of DomainV2
type DomainV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainV2Parameters `json:"forProvider"`
}

// DomainV2Status defines the observed state of DomainV2.
type DomainV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainV2 is the Schema for the DomainV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type DomainV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainV2Spec   `json:"spec"`
	Status            DomainV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainV2List contains a list of DomainV2s
type DomainV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainV2 `json:"items"`
}

// Repository type metadata.
var (
	DomainV2_Kind             = "DomainV2"
	DomainV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainV2_Kind}.String()
	DomainV2_KindAPIVersion   = DomainV2_Kind + "." + CRDGroupVersion.String()
	DomainV2_GroupVersionKind = CRDGroupVersion.WithKind(DomainV2_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainV2{}, &DomainV2List{})
}
