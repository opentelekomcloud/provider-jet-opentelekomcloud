/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganizationV2Observation struct {
	Auth *int64 `json:"auth,omitempty" tf:"auth,omitempty"`

	CreatorName *string `json:"creatorName,omitempty" tf:"creator_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OrganizationID *int64 `json:"organizationId,omitempty" tf:"organization_id,omitempty"`
}

type OrganizationV2Parameters struct {
}

// OrganizationV2Spec defines the desired state of OrganizationV2
type OrganizationV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationV2Parameters `json:"forProvider"`
}

// OrganizationV2Status defines the observed state of OrganizationV2.
type OrganizationV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationV2 is the Schema for the OrganizationV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type OrganizationV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrganizationV2Spec   `json:"spec"`
	Status            OrganizationV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationV2List contains a list of OrganizationV2s
type OrganizationV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationV2 `json:"items"`
}

// Repository type metadata.
var (
	OrganizationV2_Kind             = "OrganizationV2"
	OrganizationV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganizationV2_Kind}.String()
	OrganizationV2_KindAPIVersion   = OrganizationV2_Kind + "." + CRDGroupVersion.String()
	OrganizationV2_GroupVersionKind = CRDGroupVersion.WithKind(OrganizationV2_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganizationV2{}, &OrganizationV2List{})
}
