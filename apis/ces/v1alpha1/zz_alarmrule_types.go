/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlarmActionsObservation struct {
}

type AlarmActionsParameters struct {

	// +kubebuilder:validation:Required
	NotificationList []*string `json:"notificationList" tf:"notification_list,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type AlarmruleObservation struct {
	AlarmState *string `json:"alarmState,omitempty" tf:"alarm_state,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdateTime *int64 `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type AlarmruleParameters struct {

	// +kubebuilder:validation:Optional
	AlarmActionEnabled *bool `json:"alarmActionEnabled,omitempty" tf:"alarm_action_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	AlarmActions []AlarmActionsParameters `json:"alarmActions,omitempty" tf:"alarm_actions,omitempty"`

	// +kubebuilder:validation:Optional
	AlarmDescription *string `json:"alarmDescription,omitempty" tf:"alarm_description,omitempty"`

	// +kubebuilder:validation:Optional
	AlarmEnabled *bool `json:"alarmEnabled,omitempty" tf:"alarm_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	AlarmLevel *int64 `json:"alarmLevel,omitempty" tf:"alarm_level,omitempty"`

	// +kubebuilder:validation:Required
	AlarmName *string `json:"alarmName" tf:"alarm_name,omitempty"`

	// +kubebuilder:validation:Required
	Condition []ConditionParameters `json:"condition" tf:"condition,omitempty"`

	// +kubebuilder:validation:Optional
	InsufficientdataActions []InsufficientdataActionsParameters `json:"insufficientdataActions,omitempty" tf:"insufficientdata_actions,omitempty"`

	// +kubebuilder:validation:Required
	Metric []MetricParameters `json:"metric" tf:"metric,omitempty"`

	// +kubebuilder:validation:Optional
	OkActions []OkActionsParameters `json:"okActions,omitempty" tf:"ok_actions,omitempty"`
}

type ConditionObservation struct {
}

type ConditionParameters struct {

	// +kubebuilder:validation:Required
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator,omitempty"`

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`

	// +kubebuilder:validation:Required
	Filter *string `json:"filter" tf:"filter,omitempty"`

	// +kubebuilder:validation:Required
	Period *int64 `json:"period" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// +kubebuilder:validation:Required
	Value *int64 `json:"value" tf:"value,omitempty"`
}

type DimensionsObservation struct {
}

type DimensionsParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type InsufficientdataActionsObservation struct {
}

type InsufficientdataActionsParameters struct {

	// +kubebuilder:validation:Required
	NotificationList []*string `json:"notificationList" tf:"notification_list,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type MetricObservation struct {
}

type MetricParameters struct {

	// +kubebuilder:validation:Required
	Dimensions []DimensionsParameters `json:"dimensions" tf:"dimensions,omitempty"`

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type OkActionsObservation struct {
}

type OkActionsParameters struct {

	// +kubebuilder:validation:Required
	NotificationList []*string `json:"notificationList" tf:"notification_list,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// AlarmruleSpec defines the desired state of Alarmrule
type AlarmruleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlarmruleParameters `json:"forProvider"`
}

// AlarmruleStatus defines the observed state of Alarmrule.
type AlarmruleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlarmruleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Alarmrule is the Schema for the Alarmrules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type Alarmrule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlarmruleSpec   `json:"spec"`
	Status            AlarmruleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmruleList contains a list of Alarmrules
type AlarmruleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Alarmrule `json:"items"`
}

// Repository type metadata.
var (
	Alarmrule_Kind             = "Alarmrule"
	Alarmrule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Alarmrule_Kind}.String()
	Alarmrule_KindAPIVersion   = Alarmrule_Kind + "." + CRDGroupVersion.String()
	Alarmrule_GroupVersionKind = CRDGroupVersion.WithKind(Alarmrule_Kind)
)

func init() {
	SchemeBuilder.Register(&Alarmrule{}, &AlarmruleList{})
}
