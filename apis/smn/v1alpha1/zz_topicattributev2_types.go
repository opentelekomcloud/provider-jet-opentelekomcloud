/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TopicAttributeV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TopicAttributeV2Parameters struct {

	// +kubebuilder:validation:Required
	AttributeName *string `json:"attributeName" tf:"attribute_name,omitempty"`

	// +kubebuilder:validation:Required
	TopicAttribute *string `json:"topicAttribute" tf:"topic_attribute,omitempty"`

	// +kubebuilder:validation:Required
	TopicUrn *string `json:"topicUrn" tf:"topic_urn,omitempty"`
}

// TopicAttributeV2Spec defines the desired state of TopicAttributeV2
type TopicAttributeV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TopicAttributeV2Parameters `json:"forProvider"`
}

// TopicAttributeV2Status defines the observed state of TopicAttributeV2.
type TopicAttributeV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TopicAttributeV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TopicAttributeV2 is the Schema for the TopicAttributeV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type TopicAttributeV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TopicAttributeV2Spec   `json:"spec"`
	Status            TopicAttributeV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TopicAttributeV2List contains a list of TopicAttributeV2s
type TopicAttributeV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TopicAttributeV2 `json:"items"`
}

// Repository type metadata.
var (
	TopicAttributeV2_Kind             = "TopicAttributeV2"
	TopicAttributeV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TopicAttributeV2_Kind}.String()
	TopicAttributeV2_KindAPIVersion   = TopicAttributeV2_Kind + "." + CRDGroupVersion.String()
	TopicAttributeV2_GroupVersionKind = CRDGroupVersion.WithKind(TopicAttributeV2_Kind)
)

func init() {
	SchemeBuilder.Register(&TopicAttributeV2{}, &TopicAttributeV2List{})
}
