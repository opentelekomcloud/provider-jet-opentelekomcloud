/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubscriptionV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	Status *int64 `json:"status,omitempty" tf:"status,omitempty"`

	SubscriptionUrn *string `json:"subscriptionUrn,omitempty" tf:"subscription_urn,omitempty"`
}

type SubscriptionV2Parameters struct {

	// +kubebuilder:validation:Required
	Endpoint *string `json:"endpoint" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// +kubebuilder:validation:Required
	TopicUrn *string `json:"topicUrn" tf:"topic_urn,omitempty"`
}

// SubscriptionV2Spec defines the desired state of SubscriptionV2
type SubscriptionV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscriptionV2Parameters `json:"forProvider"`
}

// SubscriptionV2Status defines the observed state of SubscriptionV2.
type SubscriptionV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscriptionV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionV2 is the Schema for the SubscriptionV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type SubscriptionV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubscriptionV2Spec   `json:"spec"`
	Status            SubscriptionV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionV2List contains a list of SubscriptionV2s
type SubscriptionV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubscriptionV2 `json:"items"`
}

// Repository type metadata.
var (
	SubscriptionV2_Kind             = "SubscriptionV2"
	SubscriptionV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubscriptionV2_Kind}.String()
	SubscriptionV2_KindAPIVersion   = SubscriptionV2_Kind + "." + CRDGroupVersion.String()
	SubscriptionV2_GroupVersionKind = CRDGroupVersion.WithKind(SubscriptionV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SubscriptionV2{}, &SubscriptionV2List{})
}
