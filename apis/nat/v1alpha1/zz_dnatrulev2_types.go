/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnatRuleV2Observation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	FloatingIPAddress *string `json:"floatingIpAddress,omitempty" tf:"floating_ip_address,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type DnatRuleV2Parameters struct {

	// +kubebuilder:validation:Required
	ExternalServicePort *int64 `json:"externalServicePort" tf:"external_service_port,omitempty"`

	// +kubebuilder:validation:Required
	FloatingIPID *string `json:"floatingIpId" tf:"floating_ip_id,omitempty"`

	// +kubebuilder:validation:Required
	InternalServicePort *int64 `json:"internalServicePort" tf:"internal_service_port,omitempty"`

	// +kubebuilder:validation:Required
	NATGatewayID *string `json:"natGatewayId" tf:"nat_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

// DnatRuleV2Spec defines the desired state of DnatRuleV2
type DnatRuleV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnatRuleV2Parameters `json:"forProvider"`
}

// DnatRuleV2Status defines the observed state of DnatRuleV2.
type DnatRuleV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnatRuleV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DnatRuleV2 is the Schema for the DnatRuleV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type DnatRuleV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnatRuleV2Spec   `json:"spec"`
	Status            DnatRuleV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnatRuleV2List contains a list of DnatRuleV2s
type DnatRuleV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnatRuleV2 `json:"items"`
}

// Repository type metadata.
var (
	DnatRuleV2_Kind             = "DnatRuleV2"
	DnatRuleV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DnatRuleV2_Kind}.String()
	DnatRuleV2_KindAPIVersion   = DnatRuleV2_Kind + "." + CRDGroupVersion.String()
	DnatRuleV2_GroupVersionKind = CRDGroupVersion.WithKind(DnatRuleV2_Kind)
)

func init() {
	SchemeBuilder.Register(&DnatRuleV2{}, &DnatRuleV2List{})
}
