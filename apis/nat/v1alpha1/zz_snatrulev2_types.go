/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SnatRuleV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SnatRuleV2Parameters struct {

	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// +kubebuilder:validation:Required
	FloatingIPID *string `json:"floatingIpId" tf:"floating_ip_id,omitempty"`

	// +kubebuilder:validation:Required
	NATGatewayID *string `json:"natGatewayId" tf:"nat_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	SourceType *int64 `json:"sourceType,omitempty" tf:"source_type,omitempty"`
}

// SnatRuleV2Spec defines the desired state of SnatRuleV2
type SnatRuleV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnatRuleV2Parameters `json:"forProvider"`
}

// SnatRuleV2Status defines the observed state of SnatRuleV2.
type SnatRuleV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnatRuleV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnatRuleV2 is the Schema for the SnatRuleV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type SnatRuleV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnatRuleV2Spec   `json:"spec"`
	Status            SnatRuleV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnatRuleV2List contains a list of SnatRuleV2s
type SnatRuleV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnatRuleV2 `json:"items"`
}

// Repository type metadata.
var (
	SnatRuleV2_Kind             = "SnatRuleV2"
	SnatRuleV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnatRuleV2_Kind}.String()
	SnatRuleV2_KindAPIVersion   = SnatRuleV2_Kind + "." + CRDGroupVersion.String()
	SnatRuleV2_GroupVersionKind = CRDGroupVersion.WithKind(SnatRuleV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SnatRuleV2{}, &SnatRuleV2List{})
}
