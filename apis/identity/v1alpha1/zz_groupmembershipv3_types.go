/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupMembershipV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupMembershipV3Parameters struct {

	// +kubebuilder:validation:Required
	Group *string `json:"group" tf:"group,omitempty"`

	// +kubebuilder:validation:Required
	Users []*string `json:"users" tf:"users,omitempty"`
}

// GroupMembershipV3Spec defines the desired state of GroupMembershipV3
type GroupMembershipV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupMembershipV3Parameters `json:"forProvider"`
}

// GroupMembershipV3Status defines the observed state of GroupMembershipV3.
type GroupMembershipV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupMembershipV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMembershipV3 is the Schema for the GroupMembershipV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type GroupMembershipV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupMembershipV3Spec   `json:"spec"`
	Status            GroupMembershipV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMembershipV3List contains a list of GroupMembershipV3s
type GroupMembershipV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupMembershipV3 `json:"items"`
}

// Repository type metadata.
var (
	GroupMembershipV3_Kind             = "GroupMembershipV3"
	GroupMembershipV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupMembershipV3_Kind}.String()
	GroupMembershipV3_KindAPIVersion   = GroupMembershipV3_Kind + "." + CRDGroupVersion.String()
	GroupMembershipV3_GroupVersionKind = CRDGroupVersion.WithKind(GroupMembershipV3_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupMembershipV3{}, &GroupMembershipV3List{})
}
