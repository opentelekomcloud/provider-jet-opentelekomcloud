/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CredentialV3Observation struct {
	Access *string `json:"access,omitempty" tf:"access,omitempty"`

	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LastUseTime *string `json:"lastUseTime,omitempty" tf:"last_use_time,omitempty"`

	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`
}

type CredentialV3Parameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

// CredentialV3Spec defines the desired state of CredentialV3
type CredentialV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CredentialV3Parameters `json:"forProvider"`
}

// CredentialV3Status defines the observed state of CredentialV3.
type CredentialV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CredentialV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CredentialV3 is the Schema for the CredentialV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type CredentialV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CredentialV3Spec   `json:"spec"`
	Status            CredentialV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CredentialV3List contains a list of CredentialV3s
type CredentialV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CredentialV3 `json:"items"`
}

// Repository type metadata.
var (
	CredentialV3_Kind             = "CredentialV3"
	CredentialV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CredentialV3_Kind}.String()
	CredentialV3_KindAPIVersion   = CredentialV3_Kind + "." + CRDGroupVersion.String()
	CredentialV3_GroupVersionKind = CRDGroupVersion.WithKind(CredentialV3_Kind)
)

func init() {
	SchemeBuilder.Register(&CredentialV3{}, &CredentialV3List{})
}
