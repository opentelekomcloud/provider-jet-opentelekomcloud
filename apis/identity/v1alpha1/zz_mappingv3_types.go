/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MappingV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links map[string]*string `json:"links,omitempty" tf:"links,omitempty"`
}

type MappingV3Parameters struct {

	// +kubebuilder:validation:Required
	MappingID *string `json:"mappingId" tf:"mapping_id,omitempty"`

	// +kubebuilder:validation:Required
	Rules *string `json:"rules" tf:"rules,omitempty"`
}

// MappingV3Spec defines the desired state of MappingV3
type MappingV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MappingV3Parameters `json:"forProvider"`
}

// MappingV3Status defines the observed state of MappingV3.
type MappingV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MappingV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MappingV3 is the Schema for the MappingV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type MappingV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MappingV3Spec   `json:"spec"`
	Status            MappingV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MappingV3List contains a list of MappingV3s
type MappingV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MappingV3 `json:"items"`
}

// Repository type metadata.
var (
	MappingV3_Kind             = "MappingV3"
	MappingV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MappingV3_Kind}.String()
	MappingV3_KindAPIVersion   = MappingV3_Kind + "." + CRDGroupVersion.String()
	MappingV3_GroupVersionKind = CRDGroupVersion.WithKind(MappingV3_Kind)
)

func init() {
	SchemeBuilder.Register(&MappingV3{}, &MappingV3List{})
}
