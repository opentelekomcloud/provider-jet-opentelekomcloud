/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type UserV3Parameters struct {

	// +kubebuilder:validation:Optional
	DefaultProjectID *string `json:"defaultProjectId,omitempty" tf:"default_project_id,omitempty"`

	// +kubebuilder:validation:Optional
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	SendWelcomeEmail *bool `json:"sendWelcomeEmail,omitempty" tf:"send_welcome_email,omitempty"`
}

// UserV3Spec defines the desired state of UserV3
type UserV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserV3Parameters `json:"forProvider"`
}

// UserV3Status defines the observed state of UserV3.
type UserV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UserV3 is the Schema for the UserV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type UserV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserV3Spec   `json:"spec"`
	Status            UserV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserV3List contains a list of UserV3s
type UserV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserV3 `json:"items"`
}

// Repository type metadata.
var (
	UserV3_Kind             = "UserV3"
	UserV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserV3_Kind}.String()
	UserV3_KindAPIVersion   = UserV3_Kind + "." + CRDGroupVersion.String()
	UserV3_GroupVersionKind = CRDGroupVersion.WithKind(UserV3_Kind)
)

func init() {
	SchemeBuilder.Register(&UserV3{}, &UserV3List{})
}
