/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserGroupMembershipV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type UserGroupMembershipV3Parameters struct {

	// +kubebuilder:validation:Required
	Groups []*string `json:"groups" tf:"groups,omitempty"`

	// +kubebuilder:validation:Required
	User *string `json:"user" tf:"user,omitempty"`
}

// UserGroupMembershipV3Spec defines the desired state of UserGroupMembershipV3
type UserGroupMembershipV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserGroupMembershipV3Parameters `json:"forProvider"`
}

// UserGroupMembershipV3Status defines the observed state of UserGroupMembershipV3.
type UserGroupMembershipV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserGroupMembershipV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UserGroupMembershipV3 is the Schema for the UserGroupMembershipV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type UserGroupMembershipV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserGroupMembershipV3Spec   `json:"spec"`
	Status            UserGroupMembershipV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserGroupMembershipV3List contains a list of UserGroupMembershipV3s
type UserGroupMembershipV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserGroupMembershipV3 `json:"items"`
}

// Repository type metadata.
var (
	UserGroupMembershipV3_Kind             = "UserGroupMembershipV3"
	UserGroupMembershipV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserGroupMembershipV3_Kind}.String()
	UserGroupMembershipV3_KindAPIVersion   = UserGroupMembershipV3_Kind + "." + CRDGroupVersion.String()
	UserGroupMembershipV3_GroupVersionKind = CRDGroupVersion.WithKind(UserGroupMembershipV3_Kind)
)

func init() {
	SchemeBuilder.Register(&UserGroupMembershipV3{}, &UserGroupMembershipV3List{})
}
