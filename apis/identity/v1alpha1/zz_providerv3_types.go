/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProviderV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links map[string]*string `json:"links,omitempty" tf:"links,omitempty"`

	RemoteIds []*string `json:"remoteIds,omitempty" tf:"remote_ids,omitempty"`
}

type ProviderV3Parameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

// ProviderV3Spec defines the desired state of ProviderV3
type ProviderV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProviderV3Parameters `json:"forProvider"`
}

// ProviderV3Status defines the observed state of ProviderV3.
type ProviderV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProviderV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderV3 is the Schema for the ProviderV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type ProviderV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProviderV3Spec   `json:"spec"`
	Status            ProviderV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderV3List contains a list of ProviderV3s
type ProviderV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProviderV3 `json:"items"`
}

// Repository type metadata.
var (
	ProviderV3_Kind             = "ProviderV3"
	ProviderV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProviderV3_Kind}.String()
	ProviderV3_KindAPIVersion   = ProviderV3_Kind + "." + CRDGroupVersion.String()
	ProviderV3_GroupVersionKind = CRDGroupVersion.WithKind(ProviderV3_Kind)
)

func init() {
	SchemeBuilder.Register(&ProviderV3{}, &ProviderV3List{})
}
