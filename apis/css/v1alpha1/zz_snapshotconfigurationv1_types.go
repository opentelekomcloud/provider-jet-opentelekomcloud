/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationObservation struct {
}

type ConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Agency *string `json:"agency" tf:"agency,omitempty"`

	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`
}

type CreationPolicyObservation struct {
}

type CreationPolicyParameters struct {

	// +kubebuilder:validation:Optional
	DeleteAuto *bool `json:"deleteAuto,omitempty" tf:"delete_auto,omitempty"`

	// +kubebuilder:validation:Required
	Enable *bool `json:"enable" tf:"enable,omitempty"`

	// +kubebuilder:validation:Required
	Keepday *int64 `json:"keepday" tf:"keepday,omitempty"`

	// +kubebuilder:validation:Required
	Period *string `json:"period" tf:"period,omitempty"`

	// +kubebuilder:validation:Required
	Prefix *string `json:"prefix" tf:"prefix,omitempty"`
}

type SnapshotConfigurationV1Observation struct {
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SnapshotConfigurationV1Parameters struct {

	// +kubebuilder:validation:Optional
	Automatic *bool `json:"automatic,omitempty" tf:"automatic,omitempty"`

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	Configuration []ConfigurationParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// +kubebuilder:validation:Optional
	CreationPolicy []CreationPolicyParameters `json:"creationPolicy,omitempty" tf:"creation_policy,omitempty"`
}

// SnapshotConfigurationV1Spec defines the desired state of SnapshotConfigurationV1
type SnapshotConfigurationV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotConfigurationV1Parameters `json:"forProvider"`
}

// SnapshotConfigurationV1Status defines the observed state of SnapshotConfigurationV1.
type SnapshotConfigurationV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotConfigurationV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotConfigurationV1 is the Schema for the SnapshotConfigurationV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type SnapshotConfigurationV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotConfigurationV1Spec   `json:"spec"`
	Status            SnapshotConfigurationV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotConfigurationV1List contains a list of SnapshotConfigurationV1s
type SnapshotConfigurationV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotConfigurationV1 `json:"items"`
}

// Repository type metadata.
var (
	SnapshotConfigurationV1_Kind             = "SnapshotConfigurationV1"
	SnapshotConfigurationV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnapshotConfigurationV1_Kind}.String()
	SnapshotConfigurationV1_KindAPIVersion   = SnapshotConfigurationV1_Kind + "." + CRDGroupVersion.String()
	SnapshotConfigurationV1_GroupVersionKind = CRDGroupVersion.WithKind(SnapshotConfigurationV1_Kind)
)

func init() {
	SchemeBuilder.Register(&SnapshotConfigurationV1{}, &SnapshotConfigurationV1List{})
}
