/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterV1Observation struct {
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Nodes []NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type ClusterV1Parameters struct {

	// +kubebuilder:validation:Optional
	AdminPass *string `json:"adminPass,omitempty" tf:"admin_pass,omitempty"`

	// +kubebuilder:validation:Optional
	Datastore []DatastoreParameters `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// +kubebuilder:validation:Optional
	EnableAuthority *bool `json:"enableAuthority,omitempty" tf:"enable_authority,omitempty"`

	// +kubebuilder:validation:Optional
	EnableHTTPS *bool `json:"enableHttps,omitempty" tf:"enable_https,omitempty"`

	// +kubebuilder:validation:Optional
	ExpectNodeNum *int64 `json:"expectNodeNum,omitempty" tf:"expect_node_num,omitempty"`

	// +kubebuilder:validation:Required
	NodeConfig []NodeConfigParameters `json:"nodeConfig" tf:"node_config,omitempty"`
}

type DatastoreObservation struct {
}

type DatastoreParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NetworkInfoObservation struct {
}

type NetworkInfoParameters struct {

	// +kubebuilder:validation:Required
	NetworkID *string `json:"networkId" tf:"network_id,omitempty"`

	// +kubebuilder:validation:Required
	SecurityGroupID *string `json:"securityGroupId" tf:"security_group_id,omitempty"`

	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

type NodeConfigObservation struct {
}

type NodeConfigParameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Required
	Flavor *string `json:"flavor" tf:"flavor,omitempty"`

	// +kubebuilder:validation:Required
	NetworkInfo []NetworkInfoParameters `json:"networkInfo" tf:"network_info,omitempty"`

	// +kubebuilder:validation:Required
	Volume []VolumeParameters `json:"volume" tf:"volume,omitempty"`
}

type NodesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodesParameters struct {
}

type VolumeObservation struct {
}

type VolumeParameters struct {

	// +kubebuilder:validation:Optional
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key,omitempty"`

	// +kubebuilder:validation:Required
	Size *int64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	VolumeType *string `json:"volumeType" tf:"volume_type,omitempty"`
}

// ClusterV1Spec defines the desired state of ClusterV1
type ClusterV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterV1Parameters `json:"forProvider"`
}

// ClusterV1Status defines the observed state of ClusterV1.
type ClusterV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterV1 is the Schema for the ClusterV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type ClusterV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterV1Spec   `json:"spec"`
	Status            ClusterV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterV1List contains a list of ClusterV1s
type ClusterV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterV1 `json:"items"`
}

// Repository type metadata.
var (
	ClusterV1_Kind             = "ClusterV1"
	ClusterV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterV1_Kind}.String()
	ClusterV1_KindAPIVersion   = ClusterV1_Kind + "." + CRDGroupVersion.String()
	ClusterV1_GroupVersionKind = CRDGroupVersion.WithKind(ClusterV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterV1{}, &ClusterV1List{})
}
