/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyV2Parameters struct {

	// +kubebuilder:validation:Optional
	Audited *bool `json:"audited,omitempty" tf:"audited,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Rules []*string `json:"rules,omitempty" tf:"rules,omitempty"`

	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSpecs map[string]string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

// PolicyV2Spec defines the desired state of PolicyV2
type PolicyV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyV2Parameters `json:"forProvider"`
}

// PolicyV2Status defines the observed state of PolicyV2.
type PolicyV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyV2 is the Schema for the PolicyV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type PolicyV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyV2Spec   `json:"spec"`
	Status            PolicyV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyV2List contains a list of PolicyV2s
type PolicyV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyV2 `json:"items"`
}

// Repository type metadata.
var (
	PolicyV2_Kind             = "PolicyV2"
	PolicyV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyV2_Kind}.String()
	PolicyV2_KindAPIVersion   = PolicyV2_Kind + "." + CRDGroupVersion.String()
	PolicyV2_GroupVersionKind = CRDGroupVersion.WithKind(PolicyV2_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyV2{}, &PolicyV2List{})
}
