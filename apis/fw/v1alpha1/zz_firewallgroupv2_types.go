/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FirewallGroupV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FirewallGroupV2Parameters struct {

	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EgressPolicyID *string `json:"egressPolicyId,omitempty" tf:"egress_policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	IngressPolicyID *string `json:"ingressPolicyId,omitempty" tf:"ingress_policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSpecs map[string]string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

// FirewallGroupV2Spec defines the desired state of FirewallGroupV2
type FirewallGroupV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FirewallGroupV2Parameters `json:"forProvider"`
}

// FirewallGroupV2Status defines the observed state of FirewallGroupV2.
type FirewallGroupV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FirewallGroupV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallGroupV2 is the Schema for the FirewallGroupV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type FirewallGroupV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirewallGroupV2Spec   `json:"spec"`
	Status            FirewallGroupV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallGroupV2List contains a list of FirewallGroupV2s
type FirewallGroupV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirewallGroupV2 `json:"items"`
}

// Repository type metadata.
var (
	FirewallGroupV2_Kind             = "FirewallGroupV2"
	FirewallGroupV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FirewallGroupV2_Kind}.String()
	FirewallGroupV2_KindAPIVersion   = FirewallGroupV2_Kind + "." + CRDGroupVersion.String()
	FirewallGroupV2_GroupVersionKind = CRDGroupVersion.WithKind(FirewallGroupV2_Kind)
)

func init() {
	SchemeBuilder.Register(&FirewallGroupV2{}, &FirewallGroupV2List{})
}
