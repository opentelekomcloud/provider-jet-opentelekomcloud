/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PoolV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`
}

type PoolV3Parameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	LBAlgorithm *string `json:"lbAlgorithm" tf:"lb_algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// +kubebuilder:validation:Optional
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	SessionPersistence []SessionPersistenceParameters `json:"sessionPersistence,omitempty" tf:"session_persistence,omitempty"`
}

type SessionPersistenceObservation struct {
}

type SessionPersistenceParameters struct {

	// +kubebuilder:validation:Optional
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// +kubebuilder:validation:Optional
	PersistenceTimeout *int64 `json:"persistenceTimeout,omitempty" tf:"persistence_timeout,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// PoolV3Spec defines the desired state of PoolV3
type PoolV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PoolV3Parameters `json:"forProvider"`
}

// PoolV3Status defines the observed state of PoolV3.
type PoolV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PoolV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PoolV3 is the Schema for the PoolV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type PoolV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PoolV3Spec   `json:"spec"`
	Status            PoolV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PoolV3List contains a list of PoolV3s
type PoolV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PoolV3 `json:"items"`
}

// Repository type metadata.
var (
	PoolV3_Kind             = "PoolV3"
	PoolV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PoolV3_Kind}.String()
	PoolV3_KindAPIVersion   = PoolV3_Kind + "." + CRDGroupVersion.String()
	PoolV3_GroupVersionKind = CRDGroupVersion.WithKind(PoolV3_Kind)
)

func init() {
	SchemeBuilder.Register(&PoolV3{}, &PoolV3List{})
}
