/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MemberV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	MemberID *string `json:"memberId,omitempty" tf:"member_id,omitempty"`

	OperatingStatus *string `json:"operatingStatus,omitempty" tf:"operating_status,omitempty"`
}

type MemberV3Parameters struct {

	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// +kubebuilder:validation:Required
	PoolID *string `json:"poolId" tf:"pool_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Required
	ProtocolPort *int64 `json:"protocolPort" tf:"protocol_port,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *int64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// MemberV3Spec defines the desired state of MemberV3
type MemberV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MemberV3Parameters `json:"forProvider"`
}

// MemberV3Status defines the observed state of MemberV3.
type MemberV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MemberV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MemberV3 is the Schema for the MemberV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type MemberV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MemberV3Spec   `json:"spec"`
	Status            MemberV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MemberV3List contains a list of MemberV3s
type MemberV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MemberV3 `json:"items"`
}

// Repository type metadata.
var (
	MemberV3_Kind             = "MemberV3"
	MemberV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MemberV3_Kind}.String()
	MemberV3_KindAPIVersion   = MemberV3_Kind + "." + CRDGroupVersion.String()
	MemberV3_GroupVersionKind = CRDGroupVersion.WithKind(MemberV3_Kind)
)

func init() {
	SchemeBuilder.Register(&MemberV3{}, &MemberV3List{})
}
