/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LoadbalancerV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	VipPortID *string `json:"vipPortId,omitempty" tf:"vip_port_id,omitempty"`
}

type LoadbalancerV2Parameters struct {

	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	LoadbalancerProvider *string `json:"loadbalancerProvider,omitempty" tf:"loadbalancer_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// +kubebuilder:validation:Optional
	VipAddress *string `json:"vipAddress,omitempty" tf:"vip_address,omitempty"`

	// +kubebuilder:validation:Required
	VipSubnetID *string `json:"vipSubnetId" tf:"vip_subnet_id,omitempty"`
}

// LoadbalancerV2Spec defines the desired state of LoadbalancerV2
type LoadbalancerV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LoadbalancerV2Parameters `json:"forProvider"`
}

// LoadbalancerV2Status defines the observed state of LoadbalancerV2.
type LoadbalancerV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LoadbalancerV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LoadbalancerV2 is the Schema for the LoadbalancerV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type LoadbalancerV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LoadbalancerV2Spec   `json:"spec"`
	Status            LoadbalancerV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoadbalancerV2List contains a list of LoadbalancerV2s
type LoadbalancerV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LoadbalancerV2 `json:"items"`
}

// Repository type metadata.
var (
	LoadbalancerV2_Kind             = "LoadbalancerV2"
	LoadbalancerV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LoadbalancerV2_Kind}.String()
	LoadbalancerV2_KindAPIVersion   = LoadbalancerV2_Kind + "." + CRDGroupVersion.String()
	LoadbalancerV2_GroupVersionKind = CRDGroupVersion.WithKind(LoadbalancerV2_Kind)
)

func init() {
	SchemeBuilder.Register(&LoadbalancerV2{}, &LoadbalancerV2List{})
}
