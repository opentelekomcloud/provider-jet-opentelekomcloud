/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PersistenceObservation struct {
}

type PersistenceParameters struct {

	// +kubebuilder:validation:Optional
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PoolV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PoolV2Parameters struct {

	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	LBMethod *string `json:"lbMethod" tf:"lb_method,omitempty"`

	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// +kubebuilder:validation:Optional
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	Persistence []PersistenceParameters `json:"persistence,omitempty" tf:"persistence,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// PoolV2Spec defines the desired state of PoolV2
type PoolV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PoolV2Parameters `json:"forProvider"`
}

// PoolV2Status defines the observed state of PoolV2.
type PoolV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PoolV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PoolV2 is the Schema for the PoolV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type PoolV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PoolV2Spec   `json:"spec"`
	Status            PoolV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PoolV2List contains a list of PoolV2s
type PoolV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PoolV2 `json:"items"`
}

// Repository type metadata.
var (
	PoolV2_Kind             = "PoolV2"
	PoolV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PoolV2_Kind}.String()
	PoolV2_KindAPIVersion   = PoolV2_Kind + "." + CRDGroupVersion.String()
	PoolV2_GroupVersionKind = CRDGroupVersion.WithKind(PoolV2_Kind)
)

func init() {
	SchemeBuilder.Register(&PoolV2{}, &PoolV2List{})
}
