/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LoadbalancerV3Observation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	VipPortID *string `json:"vipPortId,omitempty" tf:"vip_port_id,omitempty"`
}

type LoadbalancerV3Parameters struct {

	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// +kubebuilder:validation:Required
	AvailabilityZones []*string `json:"availabilityZones" tf:"availability_zones,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IPTargetEnable *bool `json:"ipTargetEnable,omitempty" tf:"ip_target_enable,omitempty"`

	// +kubebuilder:validation:Optional
	L4Flavor *string `json:"l4Flavor,omitempty" tf:"l4_flavor,omitempty"`

	// +kubebuilder:validation:Optional
	L7Flavor *string `json:"l7Flavor,omitempty" tf:"l7_flavor,omitempty"`

	// +kubebuilder:validation:Required
	NetworkIds []*string `json:"networkIds" tf:"network_ids,omitempty"`

	// +kubebuilder:validation:Optional
	PublicIP []PublicIPParameters `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// +kubebuilder:validation:Optional
	RouterID *string `json:"routerId,omitempty" tf:"router_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	VipAddress *string `json:"vipAddress,omitempty" tf:"vip_address,omitempty"`
}

type PublicIPObservation struct {
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PublicIPParameters struct {

	// +kubebuilder:validation:Optional
	BandwidthChargeMode *string `json:"bandwidthChargeMode,omitempty" tf:"bandwidth_charge_mode,omitempty"`

	// +kubebuilder:validation:Required
	BandwidthName *string `json:"bandwidthName" tf:"bandwidth_name,omitempty"`

	// +kubebuilder:validation:Required
	BandwidthShareType *string `json:"bandwidthShareType" tf:"bandwidth_share_type,omitempty"`

	// +kubebuilder:validation:Required
	BandwidthSize *int64 `json:"bandwidthSize" tf:"bandwidth_size,omitempty"`

	// +kubebuilder:validation:Required
	IPType *string `json:"ipType" tf:"ip_type,omitempty"`
}

// LoadbalancerV3Spec defines the desired state of LoadbalancerV3
type LoadbalancerV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LoadbalancerV3Parameters `json:"forProvider"`
}

// LoadbalancerV3Status defines the observed state of LoadbalancerV3.
type LoadbalancerV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LoadbalancerV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LoadbalancerV3 is the Schema for the LoadbalancerV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type LoadbalancerV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LoadbalancerV3Spec   `json:"spec"`
	Status            LoadbalancerV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoadbalancerV3List contains a list of LoadbalancerV3s
type LoadbalancerV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LoadbalancerV3 `json:"items"`
}

// Repository type metadata.
var (
	LoadbalancerV3_Kind             = "LoadbalancerV3"
	LoadbalancerV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LoadbalancerV3_Kind}.String()
	LoadbalancerV3_KindAPIVersion   = LoadbalancerV3_Kind + "." + CRDGroupVersion.String()
	LoadbalancerV3_GroupVersionKind = CRDGroupVersion.WithKind(LoadbalancerV3_Kind)
)

func init() {
	SchemeBuilder.Register(&LoadbalancerV3{}, &LoadbalancerV3List{})
}
