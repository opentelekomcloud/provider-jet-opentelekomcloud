/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateV3Observation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type CertificateV3Parameters struct {

	// +kubebuilder:validation:Required
	Certificate *string `json:"certificate" tf:"certificate,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// CertificateV3Spec defines the desired state of CertificateV3
type CertificateV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateV3Parameters `json:"forProvider"`
}

// CertificateV3Status defines the observed state of CertificateV3.
type CertificateV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateV3 is the Schema for the CertificateV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type CertificateV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateV3Spec   `json:"spec"`
	Status            CertificateV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateV3List contains a list of CertificateV3s
type CertificateV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateV3 `json:"items"`
}

// Repository type metadata.
var (
	CertificateV3_Kind             = "CertificateV3"
	CertificateV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CertificateV3_Kind}.String()
	CertificateV3_KindAPIVersion   = CertificateV3_Kind + "." + CRDGroupVersion.String()
	CertificateV3_GroupVersionKind = CRDGroupVersion.WithKind(CertificateV3_Kind)
)

func init() {
	SchemeBuilder.Register(&CertificateV3{}, &CertificateV3List{})
}
