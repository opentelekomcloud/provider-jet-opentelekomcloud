/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L7RuleV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`
}

type L7RuleV2Parameters struct {

	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// +kubebuilder:validation:Required
	CompareType *string `json:"compareType" tf:"compare_type,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	L7PolicyID *string `json:"l7policyId" tf:"l7policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// L7RuleV2Spec defines the desired state of L7RuleV2
type L7RuleV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L7RuleV2Parameters `json:"forProvider"`
}

// L7RuleV2Status defines the observed state of L7RuleV2.
type L7RuleV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L7RuleV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L7RuleV2 is the Schema for the L7RuleV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type L7RuleV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L7RuleV2Spec   `json:"spec"`
	Status            L7RuleV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L7RuleV2List contains a list of L7RuleV2s
type L7RuleV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L7RuleV2 `json:"items"`
}

// Repository type metadata.
var (
	L7RuleV2_Kind             = "L7RuleV2"
	L7RuleV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L7RuleV2_Kind}.String()
	L7RuleV2_KindAPIVersion   = L7RuleV2_Kind + "." + CRDGroupVersion.String()
	L7RuleV2_GroupVersionKind = CRDGroupVersion.WithKind(L7RuleV2_Kind)
)

func init() {
	SchemeBuilder.Register(&L7RuleV2{}, &L7RuleV2List{})
}
