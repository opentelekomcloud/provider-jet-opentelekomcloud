/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StackV1Observation struct {
	Capabilities []*string `json:"capabilities,omitempty" tf:"capabilities,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NotificationTopics []*string `json:"notificationTopics,omitempty" tf:"notification_topics,omitempty"`

	Outputs map[string]string `json:"outputs,omitempty" tf:"outputs,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	StatusReason *string `json:"statusReason,omitempty" tf:"status_reason,omitempty"`
}

type StackV1Parameters struct {

	// +kubebuilder:validation:Optional
	DisableRollback *bool `json:"disableRollback,omitempty" tf:"disable_rollback,omitempty"`

	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// +kubebuilder:validation:Optional
	Files map[string]string `json:"files,omitempty" tf:"files,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateURL *string `json:"templateUrl,omitempty" tf:"template_url,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutMins *int64 `json:"timeoutMins,omitempty" tf:"timeout_mins,omitempty"`
}

// StackV1Spec defines the desired state of StackV1
type StackV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StackV1Parameters `json:"forProvider"`
}

// StackV1Status defines the observed state of StackV1.
type StackV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StackV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StackV1 is the Schema for the StackV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type StackV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackV1Spec   `json:"spec"`
	Status            StackV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StackV1List contains a list of StackV1s
type StackV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StackV1 `json:"items"`
}

// Repository type metadata.
var (
	StackV1_Kind             = "StackV1"
	StackV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StackV1_Kind}.String()
	StackV1_KindAPIVersion   = StackV1_Kind + "." + CRDGroupVersion.String()
	StackV1_GroupVersionKind = CRDGroupVersion.WithKind(StackV1_Kind)
)

func init() {
	SchemeBuilder.Register(&StackV1{}, &StackV1List{})
}
