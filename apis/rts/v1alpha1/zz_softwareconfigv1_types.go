/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SoftwareConfigV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SoftwareConfigV1Parameters struct {

	// +kubebuilder:validation:Optional
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// +kubebuilder:validation:Optional
	InputValues []map[string]string `json:"inputValues,omitempty" tf:"input_values,omitempty"`

	// +kubebuilder:validation:Optional
	Options map[string]string `json:"options,omitempty" tf:"options,omitempty"`

	// +kubebuilder:validation:Optional
	OutputValues []map[string]string `json:"outputValues,omitempty" tf:"output_values,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// SoftwareConfigV1Spec defines the desired state of SoftwareConfigV1
type SoftwareConfigV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SoftwareConfigV1Parameters `json:"forProvider"`
}

// SoftwareConfigV1Status defines the observed state of SoftwareConfigV1.
type SoftwareConfigV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SoftwareConfigV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SoftwareConfigV1 is the Schema for the SoftwareConfigV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type SoftwareConfigV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SoftwareConfigV1Spec   `json:"spec"`
	Status            SoftwareConfigV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SoftwareConfigV1List contains a list of SoftwareConfigV1s
type SoftwareConfigV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SoftwareConfigV1 `json:"items"`
}

// Repository type metadata.
var (
	SoftwareConfigV1_Kind             = "SoftwareConfigV1"
	SoftwareConfigV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SoftwareConfigV1_Kind}.String()
	SoftwareConfigV1_KindAPIVersion   = SoftwareConfigV1_Kind + "." + CRDGroupVersion.String()
	SoftwareConfigV1_GroupVersionKind = CRDGroupVersion.WithKind(SoftwareConfigV1_Kind)
)

func init() {
	SchemeBuilder.Register(&SoftwareConfigV1{}, &SoftwareConfigV1List{})
}
