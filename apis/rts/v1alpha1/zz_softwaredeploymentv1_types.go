/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SoftwareDeploymentV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SoftwareDeploymentV1Parameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Required
	ConfigID *string `json:"configId" tf:"config_id,omitempty"`

	// +kubebuilder:validation:Optional
	InputValues map[string]string `json:"inputValues,omitempty" tf:"input_values,omitempty"`

	// +kubebuilder:validation:Optional
	OutputValues map[string]string `json:"outputValues,omitempty" tf:"output_values,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	ServerID *string `json:"serverId" tf:"server_id,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	StatusReason *string `json:"statusReason,omitempty" tf:"status_reason,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// SoftwareDeploymentV1Spec defines the desired state of SoftwareDeploymentV1
type SoftwareDeploymentV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SoftwareDeploymentV1Parameters `json:"forProvider"`
}

// SoftwareDeploymentV1Status defines the observed state of SoftwareDeploymentV1.
type SoftwareDeploymentV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SoftwareDeploymentV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SoftwareDeploymentV1 is the Schema for the SoftwareDeploymentV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type SoftwareDeploymentV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SoftwareDeploymentV1Spec   `json:"spec"`
	Status            SoftwareDeploymentV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SoftwareDeploymentV1List contains a list of SoftwareDeploymentV1s
type SoftwareDeploymentV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SoftwareDeploymentV1 `json:"items"`
}

// Repository type metadata.
var (
	SoftwareDeploymentV1_Kind             = "SoftwareDeploymentV1"
	SoftwareDeploymentV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SoftwareDeploymentV1_Kind}.String()
	SoftwareDeploymentV1_KindAPIVersion   = SoftwareDeploymentV1_Kind + "." + CRDGroupVersion.String()
	SoftwareDeploymentV1_GroupVersionKind = CRDGroupVersion.WithKind(SoftwareDeploymentV1_Kind)
)

func init() {
	SchemeBuilder.Register(&SoftwareDeploymentV1{}, &SoftwareDeploymentV1List{})
}
