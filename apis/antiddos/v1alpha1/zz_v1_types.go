/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type V1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type V1Parameters struct {

	// +kubebuilder:validation:Required
	AppTypeID *int64 `json:"appTypeId" tf:"app_type_id,omitempty"`

	// +kubebuilder:validation:Required
	CleaningAccessPosID *int64 `json:"cleaningAccessPosId" tf:"cleaning_access_pos_id,omitempty"`

	// +kubebuilder:validation:Required
	EnableL7 *bool `json:"enableL7" tf:"enable_l7,omitempty"`

	// +kubebuilder:validation:Required
	FloatingIPID *string `json:"floatingIpId" tf:"floating_ip_id,omitempty"`

	// +kubebuilder:validation:Required
	HTTPRequestPosID *int64 `json:"httpRequestPosId" tf:"http_request_pos_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	TrafficPosID *int64 `json:"trafficPosId" tf:"traffic_pos_id,omitempty"`
}

// V1Spec defines the desired state of V1
type V1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     V1Parameters `json:"forProvider"`
}

// V1Status defines the observed state of V1.
type V1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        V1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// V1 is the Schema for the V1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type V1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              V1Spec   `json:"spec"`
	Status            V1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// V1List contains a list of V1s
type V1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []V1 `json:"items"`
}

// Repository type metadata.
var (
	V1_Kind             = "V1"
	V1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: V1_Kind}.String()
	V1_KindAPIVersion   = V1_Kind + "." + CRDGroupVersion.String()
	V1_GroupVersionKind = CRDGroupVersion.WithKind(V1_Kind)
)

func init() {
	SchemeBuilder.Register(&V1{}, &V1List{})
}
