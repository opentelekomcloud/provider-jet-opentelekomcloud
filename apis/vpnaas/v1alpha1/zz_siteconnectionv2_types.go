/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DpdObservation struct {
}

type DpdParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Interval *int64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// +kubebuilder:validation:Optional
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type SiteConnectionV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SiteConnectionV2Parameters struct {

	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Dpd []DpdParameters `json:"dpd,omitempty" tf:"dpd,omitempty"`

	// +kubebuilder:validation:Required
	IkepolicyID *string `json:"ikepolicyId" tf:"ikepolicy_id,omitempty"`

	// +kubebuilder:validation:Optional
	Initiator *string `json:"initiator,omitempty" tf:"initiator,omitempty"`

	// +kubebuilder:validation:Required
	IpsecpolicyID *string `json:"ipsecpolicyId" tf:"ipsecpolicy_id,omitempty"`

	// +kubebuilder:validation:Optional
	LocalEpGroupID *string `json:"localEpGroupId,omitempty" tf:"local_ep_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	LocalID *string `json:"localId,omitempty" tf:"local_id,omitempty"`

	// +kubebuilder:validation:Optional
	Mtu *int64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// +kubebuilder:validation:Required
	PeerAddress *string `json:"peerAddress" tf:"peer_address,omitempty"`

	// +kubebuilder:validation:Optional
	PeerCidrs []*string `json:"peerCidrs,omitempty" tf:"peer_cidrs,omitempty"`

	// +kubebuilder:validation:Optional
	PeerEpGroupID *string `json:"peerEpGroupId,omitempty" tf:"peer_ep_group_id,omitempty"`

	// +kubebuilder:validation:Required
	PeerID *string `json:"peerId" tf:"peer_id,omitempty"`

	// +kubebuilder:validation:Required
	Psk *string `json:"psk" tf:"psk,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSpecs map[string]string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// +kubebuilder:validation:Required
	VpnserviceID *string `json:"vpnserviceId" tf:"vpnservice_id,omitempty"`
}

// SiteConnectionV2Spec defines the desired state of SiteConnectionV2
type SiteConnectionV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SiteConnectionV2Parameters `json:"forProvider"`
}

// SiteConnectionV2Status defines the observed state of SiteConnectionV2.
type SiteConnectionV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SiteConnectionV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SiteConnectionV2 is the Schema for the SiteConnectionV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type SiteConnectionV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SiteConnectionV2Spec   `json:"spec"`
	Status            SiteConnectionV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SiteConnectionV2List contains a list of SiteConnectionV2s
type SiteConnectionV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SiteConnectionV2 `json:"items"`
}

// Repository type metadata.
var (
	SiteConnectionV2_Kind             = "SiteConnectionV2"
	SiteConnectionV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SiteConnectionV2_Kind}.String()
	SiteConnectionV2_KindAPIVersion   = SiteConnectionV2_Kind + "." + CRDGroupVersion.String()
	SiteConnectionV2_GroupVersionKind = CRDGroupVersion.WithKind(SiteConnectionV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SiteConnectionV2{}, &SiteConnectionV2List{})
}
