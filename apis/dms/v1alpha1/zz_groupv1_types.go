/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupV1Observation struct {
	AvailableDeadletters *int64 `json:"availableDeadletters,omitempty" tf:"available_deadletters,omitempty"`

	AvailableMessages *int64 `json:"availableMessages,omitempty" tf:"available_messages,omitempty"`

	ConsumedMessages *int64 `json:"consumedMessages,omitempty" tf:"consumed_messages,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProducedDeadletters *int64 `json:"producedDeadletters,omitempty" tf:"produced_deadletters,omitempty"`

	ProducedMessages *int64 `json:"producedMessages,omitempty" tf:"produced_messages,omitempty"`
}

type GroupV1Parameters struct {

	// +kubebuilder:validation:Required
	QueueID *string `json:"queueId" tf:"queue_id,omitempty"`
}

// GroupV1Spec defines the desired state of GroupV1
type GroupV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupV1Parameters `json:"forProvider"`
}

// GroupV1Status defines the observed state of GroupV1.
type GroupV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupV1 is the Schema for the GroupV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type GroupV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupV1Spec   `json:"spec"`
	Status            GroupV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupV1List contains a list of GroupV1s
type GroupV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupV1 `json:"items"`
}

// Repository type metadata.
var (
	GroupV1_Kind             = "GroupV1"
	GroupV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupV1_Kind}.String()
	GroupV1_KindAPIVersion   = GroupV1_Kind + "." + CRDGroupVersion.String()
	GroupV1_GroupVersionKind = CRDGroupVersion.WithKind(GroupV1_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupV1{}, &GroupV1List{})
}
