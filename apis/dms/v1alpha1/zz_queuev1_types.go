/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QueueV1Observation struct {
	Created *float64 `json:"created,omitempty" tf:"created,omitempty"`

	GroupCount *int64 `json:"groupCount,omitempty" tf:"group_count,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MaxMsgSizeByte *int64 `json:"maxMsgSizeByte,omitempty" tf:"max_msg_size_byte,omitempty"`

	ProducedMessages *int64 `json:"producedMessages,omitempty" tf:"produced_messages,omitempty"`

	Reservation *int64 `json:"reservation,omitempty" tf:"reservation,omitempty"`
}

type QueueV1Parameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	MaxConsumeCount *int64 `json:"maxConsumeCount,omitempty" tf:"max_consume_count,omitempty"`

	// +kubebuilder:validation:Optional
	QueueMode *string `json:"queueMode,omitempty" tf:"queue_mode,omitempty"`

	// +kubebuilder:validation:Optional
	RedrivePolicy *string `json:"redrivePolicy,omitempty" tf:"redrive_policy,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionHours *int64 `json:"retentionHours,omitempty" tf:"retention_hours,omitempty"`
}

// QueueV1Spec defines the desired state of QueueV1
type QueueV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueueV1Parameters `json:"forProvider"`
}

// QueueV1Status defines the observed state of QueueV1.
type QueueV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueueV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QueueV1 is the Schema for the QueueV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type QueueV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QueueV1Spec   `json:"spec"`
	Status            QueueV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueueV1List contains a list of QueueV1s
type QueueV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QueueV1 `json:"items"`
}

// Repository type metadata.
var (
	QueueV1_Kind             = "QueueV1"
	QueueV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QueueV1_Kind}.String()
	QueueV1_KindAPIVersion   = QueueV1_Kind + "." + CRDGroupVersion.String()
	QueueV1_GroupVersionKind = CRDGroupVersion.WithKind(QueueV1_Kind)
)

func init() {
	SchemeBuilder.Register(&QueueV1{}, &QueueV1List{})
}
