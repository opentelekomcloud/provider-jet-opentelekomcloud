/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrackerV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TrackerName *string `json:"trackerName,omitempty" tf:"tracker_name,omitempty"`
}

type TrackerV1Parameters struct {

	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// +kubebuilder:validation:Optional
	FilePrefixName *string `json:"filePrefixName,omitempty" tf:"file_prefix_name,omitempty"`

	// +kubebuilder:validation:Optional
	IsSendAllKeyOperation *bool `json:"isSendAllKeyOperation,omitempty" tf:"is_send_all_key_operation,omitempty"`

	// +kubebuilder:validation:Required
	IsSupportSmn *bool `json:"isSupportSmn" tf:"is_support_smn,omitempty"`

	// +kubebuilder:validation:Optional
	NeedNotifyUserList []*string `json:"needNotifyUserList,omitempty" tf:"need_notify_user_list,omitempty"`

	// +kubebuilder:validation:Optional
	Operations []*string `json:"operations,omitempty" tf:"operations,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	TopicID *string `json:"topicId,omitempty" tf:"topic_id,omitempty"`
}

// TrackerV1Spec defines the desired state of TrackerV1
type TrackerV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrackerV1Parameters `json:"forProvider"`
}

// TrackerV1Status defines the observed state of TrackerV1.
type TrackerV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrackerV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TrackerV1 is the Schema for the TrackerV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type TrackerV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrackerV1Spec   `json:"spec"`
	Status            TrackerV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrackerV1List contains a list of TrackerV1s
type TrackerV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrackerV1 `json:"items"`
}

// Repository type metadata.
var (
	TrackerV1_Kind             = "TrackerV1"
	TrackerV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrackerV1_Kind}.String()
	TrackerV1_KindAPIVersion   = TrackerV1_Kind + "." + CRDGroupVersion.String()
	TrackerV1_GroupVersionKind = CRDGroupVersion.WithKind(TrackerV1_Kind)
)

func init() {
	SchemeBuilder.Register(&TrackerV1{}, &TrackerV1List{})
}
