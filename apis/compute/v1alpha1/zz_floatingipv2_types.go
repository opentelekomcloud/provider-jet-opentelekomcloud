/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FloatingipV2Observation struct {
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`
}

type FloatingipV2Parameters struct {

	// +kubebuilder:validation:Optional
	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// FloatingipV2Spec defines the desired state of FloatingipV2
type FloatingipV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FloatingipV2Parameters `json:"forProvider"`
}

// FloatingipV2Status defines the observed state of FloatingipV2.
type FloatingipV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FloatingipV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingipV2 is the Schema for the FloatingipV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type FloatingipV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FloatingipV2Spec   `json:"spec"`
	Status            FloatingipV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingipV2List contains a list of FloatingipV2s
type FloatingipV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FloatingipV2 `json:"items"`
}

// Repository type metadata.
var (
	FloatingipV2_Kind             = "FloatingipV2"
	FloatingipV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FloatingipV2_Kind}.String()
	FloatingipV2_KindAPIVersion   = FloatingipV2_Kind + "." + CRDGroupVersion.String()
	FloatingipV2_GroupVersionKind = CRDGroupVersion.WithKind(FloatingipV2_Kind)
)

func init() {
	SchemeBuilder.Register(&FloatingipV2{}, &FloatingipV2List{})
}
