/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BmsTagsV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BmsTagsV2Parameters struct {

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	ServerID *string `json:"serverId" tf:"server_id,omitempty"`

	// +kubebuilder:validation:Required
	Tags []*string `json:"tags" tf:"tags,omitempty"`
}

// BmsTagsV2Spec defines the desired state of BmsTagsV2
type BmsTagsV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BmsTagsV2Parameters `json:"forProvider"`
}

// BmsTagsV2Status defines the observed state of BmsTagsV2.
type BmsTagsV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BmsTagsV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BmsTagsV2 is the Schema for the BmsTagsV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type BmsTagsV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BmsTagsV2Spec   `json:"spec"`
	Status            BmsTagsV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BmsTagsV2List contains a list of BmsTagsV2s
type BmsTagsV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BmsTagsV2 `json:"items"`
}

// Repository type metadata.
var (
	BmsTagsV2_Kind             = "BmsTagsV2"
	BmsTagsV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BmsTagsV2_Kind}.String()
	BmsTagsV2_KindAPIVersion   = BmsTagsV2_Kind + "." + CRDGroupVersion.String()
	BmsTagsV2_GroupVersionKind = CRDGroupVersion.WithKind(BmsTagsV2_Kind)
)

func init() {
	SchemeBuilder.Register(&BmsTagsV2{}, &BmsTagsV2List{})
}
