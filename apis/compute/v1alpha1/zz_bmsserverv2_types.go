/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlockDeviceObservation struct {
}

type BlockDeviceParameters struct {

	// +kubebuilder:validation:Optional
	BootIndex *int64 `json:"bootIndex,omitempty" tf:"boot_index,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationType *string `json:"destinationType,omitempty" tf:"destination_type,omitempty"`

	// +kubebuilder:validation:Optional
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	// +kubebuilder:validation:Optional
	GuestFormat *string `json:"guestFormat,omitempty" tf:"guest_format,omitempty"`

	// +kubebuilder:validation:Required
	SourceType *string `json:"sourceType" tf:"source_type,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type BmsServerV2Observation struct {
	AccessIPV4 *string `json:"accessIpV4,omitempty" tf:"access_ip_v4,omitempty"`

	AccessIPV6 *string `json:"accessIpV6,omitempty" tf:"access_ip_v6,omitempty"`

	ConfigDrive *bool `json:"configDrive,omitempty" tf:"config_drive,omitempty"`

	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	HostStatus *string `json:"hostStatus,omitempty" tf:"host_status,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KernelID *string `json:"kernelId,omitempty" tf:"kernel_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type BmsServerV2Parameters struct {

	// +kubebuilder:validation:Optional
	AdminPass *string `json:"adminPass,omitempty" tf:"admin_pass,omitempty"`

	// +kubebuilder:validation:Required
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	BlockDevice []BlockDeviceParameters `json:"blockDevice,omitempty" tf:"block_device,omitempty"`

	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// +kubebuilder:validation:Optional
	FlavorName *string `json:"flavorName,omitempty" tf:"flavor_name,omitempty"`

	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// +kubebuilder:validation:Optional
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata map[string]string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// +kubebuilder:validation:Optional
	StopBeforeDestroy *bool `json:"stopBeforeDestroy,omitempty" tf:"stop_before_destroy,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type NetworkObservation struct {
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`
}

type NetworkParameters struct {

	// +kubebuilder:validation:Optional
	AccessNetwork *bool `json:"accessNetwork,omitempty" tf:"access_network,omitempty"`

	// +kubebuilder:validation:Optional
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// +kubebuilder:validation:Optional
	FixedIPV6 *string `json:"fixedIpV6,omitempty" tf:"fixed_ip_v6,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

// BmsServerV2Spec defines the desired state of BmsServerV2
type BmsServerV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BmsServerV2Parameters `json:"forProvider"`
}

// BmsServerV2Status defines the observed state of BmsServerV2.
type BmsServerV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BmsServerV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BmsServerV2 is the Schema for the BmsServerV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type BmsServerV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BmsServerV2Spec   `json:"spec"`
	Status            BmsServerV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BmsServerV2List contains a list of BmsServerV2s
type BmsServerV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BmsServerV2 `json:"items"`
}

// Repository type metadata.
var (
	BmsServerV2_Kind             = "BmsServerV2"
	BmsServerV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BmsServerV2_Kind}.String()
	BmsServerV2_KindAPIVersion   = BmsServerV2_Kind + "." + CRDGroupVersion.String()
	BmsServerV2_GroupVersionKind = CRDGroupVersion.WithKind(BmsServerV2_Kind)
)

func init() {
	SchemeBuilder.Register(&BmsServerV2{}, &BmsServerV2List{})
}
