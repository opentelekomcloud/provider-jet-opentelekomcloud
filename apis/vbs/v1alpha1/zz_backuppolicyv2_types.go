/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupPolicyV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PolicyResourceCount *int64 `json:"policyResourceCount,omitempty" tf:"policy_resource_count,omitempty"`
}

type BackupPolicyV2Parameters struct {

	// +kubebuilder:validation:Optional
	Frequency *int64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	RententionDay *int64 `json:"rententionDay,omitempty" tf:"rentention_day,omitempty"`

	// +kubebuilder:validation:Optional
	RententionNum *int64 `json:"rententionNum,omitempty" tf:"rentention_num,omitempty"`

	// +kubebuilder:validation:Optional
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	// +kubebuilder:validation:Required
	RetainFirstBackup *string `json:"retainFirstBackup" tf:"retain_first_backup,omitempty"`

	// +kubebuilder:validation:Required
	StartTime *string `json:"startTime" tf:"start_time,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	WeekFrequency []*string `json:"weekFrequency,omitempty" tf:"week_frequency,omitempty"`
}

type TagsObservation struct {
}

type TagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// BackupPolicyV2Spec defines the desired state of BackupPolicyV2
type BackupPolicyV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupPolicyV2Parameters `json:"forProvider"`
}

// BackupPolicyV2Status defines the observed state of BackupPolicyV2.
type BackupPolicyV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupPolicyV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyV2 is the Schema for the BackupPolicyV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type BackupPolicyV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupPolicyV2Spec   `json:"spec"`
	Status            BackupPolicyV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyV2List contains a list of BackupPolicyV2s
type BackupPolicyV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupPolicyV2 `json:"items"`
}

// Repository type metadata.
var (
	BackupPolicyV2_Kind             = "BackupPolicyV2"
	BackupPolicyV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupPolicyV2_Kind}.String()
	BackupPolicyV2_KindAPIVersion   = BackupPolicyV2_Kind + "." + CRDGroupVersion.String()
	BackupPolicyV2_GroupVersionKind = CRDGroupVersion.WithKind(BackupPolicyV2_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupPolicyV2{}, &BackupPolicyV2List{})
}
