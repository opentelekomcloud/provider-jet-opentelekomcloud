/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupV2Observation struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ServiceMetadata *string `json:"serviceMetadata,omitempty" tf:"service_metadata,omitempty"`

	Size *int64 `json:"size,omitempty" tf:"size,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type BackupV2Parameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []BackupV2TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VolumeID *string `json:"volumeId" tf:"volume_id,omitempty"`
}

type BackupV2TagsObservation struct {
}

type BackupV2TagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// BackupV2Spec defines the desired state of BackupV2
type BackupV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupV2Parameters `json:"forProvider"`
}

// BackupV2Status defines the observed state of BackupV2.
type BackupV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupV2 is the Schema for the BackupV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type BackupV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupV2Spec   `json:"spec"`
	Status            BackupV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupV2List contains a list of BackupV2s
type BackupV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupV2 `json:"items"`
}

// Repository type metadata.
var (
	BackupV2_Kind             = "BackupV2"
	BackupV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupV2_Kind}.String()
	BackupV2_KindAPIVersion   = BackupV2_Kind + "." + CRDGroupVersion.String()
	BackupV2_GroupVersionKind = CRDGroupVersion.WithKind(BackupV2_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupV2{}, &BackupV2List{})
}
