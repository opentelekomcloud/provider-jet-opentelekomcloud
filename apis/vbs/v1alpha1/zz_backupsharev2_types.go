/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupShareV2Observation struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	BackupName *string `json:"backupName,omitempty" tf:"backup_name,omitempty"`

	BackupStatus *string `json:"backupStatus,omitempty" tf:"backup_status,omitempty"`

	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ServiceMetadata *string `json:"serviceMetadata,omitempty" tf:"service_metadata,omitempty"`

	ShareIds []*string `json:"shareIds,omitempty" tf:"share_ids,omitempty"`

	Size *int64 `json:"size,omitempty" tf:"size,omitempty"`

	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type BackupShareV2Parameters struct {

	// +kubebuilder:validation:Required
	BackupID *string `json:"backupId" tf:"backup_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	ToProjectIds []*string `json:"toProjectIds" tf:"to_project_ids,omitempty"`
}

// BackupShareV2Spec defines the desired state of BackupShareV2
type BackupShareV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupShareV2Parameters `json:"forProvider"`
}

// BackupShareV2Status defines the observed state of BackupShareV2.
type BackupShareV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupShareV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupShareV2 is the Schema for the BackupShareV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type BackupShareV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupShareV2Spec   `json:"spec"`
	Status            BackupShareV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupShareV2List contains a list of BackupShareV2s
type BackupShareV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupShareV2 `json:"items"`
}

// Repository type metadata.
var (
	BackupShareV2_Kind             = "BackupShareV2"
	BackupShareV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupShareV2_Kind}.String()
	BackupShareV2_KindAPIVersion   = BackupShareV2_Kind + "." + CRDGroupVersion.String()
	BackupShareV2_GroupVersionKind = CRDGroupVersion.WithKind(BackupShareV2_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupShareV2{}, &BackupShareV2List{})
}
