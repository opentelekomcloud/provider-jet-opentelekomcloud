/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainV1Observation struct {
	AccessCode *string `json:"accessCode,omitempty" tf:"access_code,omitempty"`

	AccessStatus *int64 `json:"accessStatus,omitempty" tf:"access_status,omitempty"`

	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProtectStatus *int64 `json:"protectStatus,omitempty" tf:"protect_status,omitempty"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	SubDomain *string `json:"subDomain,omitempty" tf:"sub_domain,omitempty"`

	TxtCode *string `json:"txtCode,omitempty" tf:"txt_code,omitempty"`
}

type DomainV1Parameters struct {

	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// +kubebuilder:validation:Optional
	Cipher *string `json:"cipher,omitempty" tf:"cipher,omitempty"`

	// +kubebuilder:validation:Required
	Hostname *string `json:"hostname" tf:"hostname,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// +kubebuilder:validation:Required
	Proxy *bool `json:"proxy" tf:"proxy,omitempty"`

	// +kubebuilder:validation:Optional
	SIPHeaderList []*string `json:"sipHeaderList,omitempty" tf:"sip_header_list,omitempty"`

	// +kubebuilder:validation:Optional
	SIPHeaderName *string `json:"sipHeaderName,omitempty" tf:"sip_header_name,omitempty"`

	// +kubebuilder:validation:Required
	Server []ServerParameters `json:"server" tf:"server,omitempty"`

	// +kubebuilder:validation:Optional
	TLS *string `json:"tls,omitempty" tf:"tls,omitempty"`
}

type ServerObservation struct {
}

type ServerParameters struct {

	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// +kubebuilder:validation:Optional
	BackProtocol *string `json:"backProtocol,omitempty" tf:"back_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	ClientProtocol *string `json:"clientProtocol,omitempty" tf:"client_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	FrontProtocol *string `json:"frontProtocol,omitempty" tf:"front_protocol,omitempty"`

	// +kubebuilder:validation:Required
	Port *string `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	ServerProtocol *string `json:"serverProtocol,omitempty" tf:"server_protocol,omitempty"`
}

// DomainV1Spec defines the desired state of DomainV1
type DomainV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainV1Parameters `json:"forProvider"`
}

// DomainV1Status defines the observed state of DomainV1.
type DomainV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainV1 is the Schema for the DomainV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type DomainV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainV1Spec   `json:"spec"`
	Status            DomainV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainV1List contains a list of DomainV1s
type DomainV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainV1 `json:"items"`
}

// Repository type metadata.
var (
	DomainV1_Kind             = "DomainV1"
	DomainV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainV1_Kind}.String()
	DomainV1_KindAPIVersion   = DomainV1_Kind + "." + CRDGroupVersion.String()
	DomainV1_GroupVersionKind = CRDGroupVersion.WithKind(DomainV1_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainV1{}, &DomainV1List{})
}
