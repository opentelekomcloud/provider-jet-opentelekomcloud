/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateV1Observation struct {
	Expires *string `json:"expires,omitempty" tf:"expires,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CertificateV1Parameters struct {

	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// CertificateV1Spec defines the desired state of CertificateV1
type CertificateV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateV1Parameters `json:"forProvider"`
}

// CertificateV1Status defines the observed state of CertificateV1.
type CertificateV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateV1 is the Schema for the CertificateV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type CertificateV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateV1Spec   `json:"spec"`
	Status            CertificateV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateV1List contains a list of CertificateV1s
type CertificateV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateV1 `json:"items"`
}

// Repository type metadata.
var (
	CertificateV1_Kind             = "CertificateV1"
	CertificateV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CertificateV1_Kind}.String()
	CertificateV1_KindAPIVersion   = CertificateV1_Kind + "." + CRDGroupVersion.String()
	CertificateV1_GroupVersionKind = CRDGroupVersion.WithKind(CertificateV1_Kind)
)

func init() {
	SchemeBuilder.Register(&CertificateV1{}, &CertificateV1List{})
}
