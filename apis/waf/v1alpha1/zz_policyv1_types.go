/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionObservation struct {
}

type ActionParameters struct {

	// +kubebuilder:validation:Required
	Category *string `json:"category" tf:"category,omitempty"`
}

type OptionsObservation struct {
}

type OptionsParameters struct {

	// +kubebuilder:validation:Optional
	Antitamper *bool `json:"antitamper,omitempty" tf:"antitamper,omitempty"`

	// +kubebuilder:validation:Optional
	Cc *bool `json:"cc,omitempty" tf:"cc,omitempty"`

	// +kubebuilder:validation:Optional
	Common *bool `json:"common,omitempty" tf:"common,omitempty"`

	// +kubebuilder:validation:Optional
	Crawler *bool `json:"crawler,omitempty" tf:"crawler,omitempty"`

	// +kubebuilder:validation:Optional
	CrawlerEngine *bool `json:"crawlerEngine,omitempty" tf:"crawler_engine,omitempty"`

	// +kubebuilder:validation:Optional
	CrawlerOther *bool `json:"crawlerOther,omitempty" tf:"crawler_other,omitempty"`

	// +kubebuilder:validation:Optional
	CrawlerScanner *bool `json:"crawlerScanner,omitempty" tf:"crawler_scanner,omitempty"`

	// +kubebuilder:validation:Optional
	CrawlerScript *bool `json:"crawlerScript,omitempty" tf:"crawler_script,omitempty"`

	// +kubebuilder:validation:Optional
	Custom *bool `json:"custom,omitempty" tf:"custom,omitempty"`

	// +kubebuilder:validation:Optional
	Ignore *bool `json:"ignore,omitempty" tf:"ignore,omitempty"`

	// +kubebuilder:validation:Optional
	Privacy *bool `json:"privacy,omitempty" tf:"privacy,omitempty"`

	// +kubebuilder:validation:Optional
	Webattack *bool `json:"webattack,omitempty" tf:"webattack,omitempty"`

	// +kubebuilder:validation:Optional
	Webshell *bool `json:"webshell,omitempty" tf:"webshell,omitempty"`

	// +kubebuilder:validation:Optional
	Whiteblackip *bool `json:"whiteblackip,omitempty" tf:"whiteblackip,omitempty"`
}

type PolicyV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyV1Parameters struct {

	// +kubebuilder:validation:Optional
	Action []ActionParameters `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	FullDetection *bool `json:"fullDetection,omitempty" tf:"full_detection,omitempty"`

	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// +kubebuilder:validation:Optional
	Level *int64 `json:"level,omitempty" tf:"level,omitempty"`

	// +kubebuilder:validation:Optional
	Options []OptionsParameters `json:"options,omitempty" tf:"options,omitempty"`
}

// PolicyV1Spec defines the desired state of PolicyV1
type PolicyV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyV1Parameters `json:"forProvider"`
}

// PolicyV1Status defines the observed state of PolicyV1.
type PolicyV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyV1 is the Schema for the PolicyV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type PolicyV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyV1Spec   `json:"spec"`
	Status            PolicyV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyV1List contains a list of PolicyV1s
type PolicyV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyV1 `json:"items"`
}

// Repository type metadata.
var (
	PolicyV1_Kind             = "PolicyV1"
	PolicyV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyV1_Kind}.String()
	PolicyV1_KindAPIVersion   = PolicyV1_Kind + "." + CRDGroupVersion.String()
	PolicyV1_GroupVersionKind = CRDGroupVersion.WithKind(PolicyV1_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyV1{}, &PolicyV1List{})
}
