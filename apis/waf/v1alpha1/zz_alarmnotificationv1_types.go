/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlarmNotificationV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AlarmNotificationV1Parameters struct {

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Locale *string `json:"locale,omitempty" tf:"locale,omitempty"`

	// +kubebuilder:validation:Required
	SendFrequency *int64 `json:"sendFrequency" tf:"send_frequency,omitempty"`

	// +kubebuilder:validation:Required
	Threat []*string `json:"threat" tf:"threat,omitempty"`

	// +kubebuilder:validation:Required
	Times *int64 `json:"times" tf:"times,omitempty"`

	// +kubebuilder:validation:Required
	TopicUrn *string `json:"topicUrn" tf:"topic_urn,omitempty"`
}

// AlarmNotificationV1Spec defines the desired state of AlarmNotificationV1
type AlarmNotificationV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlarmNotificationV1Parameters `json:"forProvider"`
}

// AlarmNotificationV1Status defines the observed state of AlarmNotificationV1.
type AlarmNotificationV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlarmNotificationV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmNotificationV1 is the Schema for the AlarmNotificationV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type AlarmNotificationV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlarmNotificationV1Spec   `json:"spec"`
	Status            AlarmNotificationV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmNotificationV1List contains a list of AlarmNotificationV1s
type AlarmNotificationV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlarmNotificationV1 `json:"items"`
}

// Repository type metadata.
var (
	AlarmNotificationV1_Kind             = "AlarmNotificationV1"
	AlarmNotificationV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlarmNotificationV1_Kind}.String()
	AlarmNotificationV1_KindAPIVersion   = AlarmNotificationV1_Kind + "." + CRDGroupVersion.String()
	AlarmNotificationV1_GroupVersionKind = CRDGroupVersion.WithKind(AlarmNotificationV1_Kind)
)

func init() {
	SchemeBuilder.Register(&AlarmNotificationV1{}, &AlarmNotificationV1List{})
}
