/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataImageV2Observation struct {
	DataOrigin *string `json:"dataOrigin,omitempty" tf:"data_origin,omitempty"`

	DiskFormat *string `json:"diskFormat,omitempty" tf:"disk_format,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ImageSize *string `json:"imageSize,omitempty" tf:"image_size,omitempty"`

	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`
}

type DataImageV2Parameters struct {

	// +kubebuilder:validation:Optional
	CmkID *string `json:"cmkId,omitempty" tf:"cmk_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ImageURL *string `json:"imageUrl,omitempty" tf:"image_url,omitempty"`

	// +kubebuilder:validation:Optional
	MinDisk *int64 `json:"minDisk,omitempty" tf:"min_disk,omitempty"`

	// +kubebuilder:validation:Optional
	OsType *string `json:"osType,omitempty" tf:"os_type,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

// DataImageV2Spec defines the desired state of DataImageV2
type DataImageV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataImageV2Parameters `json:"forProvider"`
}

// DataImageV2Status defines the observed state of DataImageV2.
type DataImageV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataImageV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataImageV2 is the Schema for the DataImageV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,otcjet}
type DataImageV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataImageV2Spec   `json:"spec"`
	Status            DataImageV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataImageV2List contains a list of DataImageV2s
type DataImageV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataImageV2 `json:"items"`
}

// Repository type metadata.
var (
	DataImageV2_Kind             = "DataImageV2"
	DataImageV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataImageV2_Kind}.String()
	DataImageV2_KindAPIVersion   = DataImageV2_Kind + "." + CRDGroupVersion.String()
	DataImageV2_GroupVersionKind = CRDGroupVersion.WithKind(DataImageV2_Kind)
)

func init() {
	SchemeBuilder.Register(&DataImageV2{}, &DataImageV2List{})
}
